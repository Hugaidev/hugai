{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HugAI Dev - Human-Governed AI Development","text":"<p>\"We don't automate developers, we multiply them.\"</p> <p>Welcome to HugAI.dev, the comprehensive methodology for implementing human-governed AI in software development. Our approach ensures that AI enhances human capabilities rather than replacing them, creating a powerful symbiosis between human creativity and AI efficiency.</p> <p>HugAI Philosophy</p> <p>Human-Governed AI Software Development represents a paradigm shift where AI amplifies human expertise rather than replacing it. We believe the best software results from combining human creativity, judgment, and domain knowledge with AI efficiency and consistency.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#glossary-of-terms","title":"Glossary of Terms","text":"<ul> <li>AI Agent: An autonomous or semi-autonomous entity that performs specialized tasks within the development lifecycle.</li> <li>Governance: A set of rules, processes, and checkpoints that ensure human control over agent actions.</li> <li>Checkpoint: A control point where human intervention, review, or approval is required.</li> <li>Agent Capabilities: Functions, tasks, or services that an agent can offer and negotiate.</li> <li>Multi-agent Orchestration: Coordination of multiple agents to collaborate on complex workflows.</li> <li>JSON-RPC 2.0: Standard messaging protocol used as the basis for communication in HugAI.</li> <li>Initialization: The process of connecting and negotiating capabilities between agents, tools, and the system.</li> <li>Human Approval: A decision made by a person at a critical checkpoint in the workflow.</li> <li>Extensibility: The protocol's ability to incorporate new features, messages, or agents without breaking compatibility.</li> <li>Traceability: An auditable record of all relevant actions, decisions, and events in the system.</li> </ul>"},{"location":"methodology/","title":"Introduction","text":"<p>The HugAI methodology is a comprehensive framework for AI-assisted software development, designed to maximize productivity and quality without losing human control at critical points in the lifecycle. HugAI integrates specialized AI agents in each phase of development, but always under a philosophy of \"human governance\": key decisions, supervision, and final validation remain in the hands of people.</p> <p>This methodology arises from the need to combine the best of intelligent automation with human experience, judgment, and responsibility. Its goal is to accelerate value delivery, improve software consistency and security, and facilitate collaboration between human teams and AI agents, all within a transparent, auditable, and adaptable framework for different organizational contexts.</p> <p>HugAI is inspired by agile practices, DevOps, and recent advances in generative AI, but adds a layer of multi-agent governance and orchestration that enables responsible and sustainable scaling of AI adoption in software development.</p>"},{"location":"methodology/best-practices/","title":"Best Practices","text":"<p>For effective adoption and use of the HugAI methodology, it is recommended to:</p> <ol> <li>Clearly define roles and responsibilities from the start of the project.</li> <li>Select the appropriate governance level for each task according to its criticality and risk.</li> <li>Document all decisions and actions taken by agents and humans to ensure traceability and auditability.</li> <li>Promote continuous training of human teams in the use of AI and in interpreting its results.</li> <li>Periodically review and update workflows and governance rules based on experience and lessons learned.</li> <li>Promote collaboration and open communication among all participants, humans and agents.</li> <li>Assess and mitigate ethical and security risks before automating critical tasks.</li> <li>Use metrics and feedback to continuously improve the integration and performance of AI agents.</li> </ol>"},{"location":"methodology/governance/","title":"Governance Levels","text":"<p>The HugAI methodology defines three levels of governance for the interaction between AI agents and humans:</p> <ol> <li>Autonomous</li> <li>The AI agent can perform tasks and make decisions within a predefined range without requiring prior human approval. Used for low-risk or highly repetitive tasks, but always with traceability and the possibility of subsequent audit.</li> <li>Supervised</li> <li>The AI agent can propose actions or solutions but requires human review and approval before executing significant changes. This is the recommended mode for medium-impact tasks or when additional control is needed.</li> <li>Manual</li> <li>The AI agent can only suggest actions, but the final execution depends entirely on human intervention. Reserved for critical, sensitive tasks or those requiring expert judgment.</li> </ol> <p>The choice of governance level depends on the context, the risk associated with the task, and the organization's policies. Levels can be dynamically adjusted according to the project phase or the agents' performance history.</p>"},{"location":"methodology/limitations/","title":"Limitations","text":"<p>Although the HugAI methodology offers a robust framework, it is important to consider its limitations:</p> <ul> <li>Dependence on the quality of AI models: The results and recommendations of the agents depend on the accuracy and updating of the underlying models.</li> <li>Requires organizational maturity: Effective adoption demands teams willing to collaborate and adapt to new processes and technologies.</li> <li>Does not replace expert judgment: AI is a complement, not a substitute for human knowledge and experience, especially in critical or ambiguous contexts.</li> <li>Possible biases and errors: Agents may inherit data biases or make mistakes; therefore, human supervision is indispensable.</li> <li>Implementation and maintenance costs: Integrating and maintaining AI agents may require investment in infrastructure, training, and continuous updating.</li> <li>Regulatory and ethical compliance: The methodology must be adapted to the legal and ethical requirements of each industry or region.</li> </ul>"},{"location":"methodology/note/","title":"Note","text":"<p>NOTE: This document is the starting point for version 2 of the HugAI methodology. Each section will be completed and improved iteratively.</p>"},{"location":"methodology/objectives/","title":"Objectives","text":"<p>The main objectives of the HugAI methodology are:</p> <ol> <li>Accelerate the delivery of quality software</li> <li> <p>Automate repetitive and complex tasks through AI agents, allowing human teams to focus on creativity, design, and strategic decision-making.</p> </li> <li> <p>Maintain governance and human control</p> </li> <li> <p>Ensure that critical decisions, reviews, and approvals remain under human supervision, ensuring accountability and regulatory compliance.</p> </li> <li> <p>Promote human-AI collaboration</p> </li> <li> <p>Integrate AI agents as specialized assistants who collaborate with human teams, enhancing productivity and innovation.</p> </li> <li> <p>Improve consistency, security, and traceability</p> </li> <li> <p>Standardize processes, apply best practices, and maintain auditable records of all actions and decisions taken by agents and humans.</p> </li> <li> <p>Facilitate scalable and sustainable AI adoption</p> </li> <li>Provide a framework adaptable to different team sizes, domains, and levels of technological maturity, allowing progressive and controlled integration of AI into the software lifecycle.</li> </ol>"},{"location":"methodology/phases/","title":"Lifecycle Phases","text":"<p>The HugAI methodology structures the software development lifecycle into the following main phases, each supported by specialized AI agents and human control checkpoints:</p> <ol> <li>Planning</li> <li>Definition of objectives, scope, requirements, and project success criteria. Analysis agents, requirements refinement agents, and domain experts participate, always validated by human stakeholders.</li> <li>Design</li> <li>Architecture, component design, technology selection, and interface definition. Architecture and design agents collaborate with humans to propose and validate solutions.</li> <li>Implementation</li> <li>Code development, module integration, and artifact generation. Code generation, integration, and documentation agents assist developers, under human review and approval.</li> <li>Testing and Validation</li> <li>Automated and manual testing, quality, security, and performance analysis. Testing, security, and performance agents generate and execute tests, reporting findings for human review.</li> <li>Deployment</li> <li>Preparation and execution of deployment in production or staging environments. DevOps and deployment agents automate processes, but key milestones require human approval.</li> <li>Maintenance and Evolution</li> <li>Monitoring, support, bug fixing, and system evolution. Maintenance and observability agents detect incidents and propose improvements, which are prioritized and validated by the human team.</li> </ol> <p>Each phase includes governance checkpoints where human intervention, review, or approval is required, thus ensuring quality, security, and alignment with project objectives.</p>"},{"location":"methodology/principles/","title":"Fundamental Principles","text":"<p>The guiding principles of the HugAI methodology are:</p> <ol> <li>Transparency</li> <li>All actions, decisions, and recommendations of AI agents must be traceable, auditable, and understandable to the humans involved.</li> <li>Human Control</li> <li>Humans retain final authority over critical decisions, being able to accept, reject, or request revisions to AI proposals.</li> <li>Collaboration</li> <li>Synergy between human teams and AI agents is promoted, leveraging the strengths of both to achieve better results.</li> <li>Accountability</li> <li>Every action taken by agents or humans must be clearly attributed, allowing accountability and regulatory compliance.</li> <li>Adaptability</li> <li>The methodology must be able to adjust to different contexts, domains, and levels of technological maturity, facilitating progressive adoption.</li> <li>Continuous Improvement</li> <li>Feedback and learning are encouraged for both agents and human teams, to iteratively evolve processes and results.</li> <li>Security and Ethics</li> <li>The integration of AI must be carried out respecting ethical and security principles, minimizing risks and preventing biases or misuse.</li> </ol>"},{"location":"methodology/roles/","title":"Roles and Responsibilities","text":"<p>In the HugAI methodology, the key roles and their main responsibilities are:</p> <ol> <li>Human Stakeholders</li> <li>Define the objectives, priorities, and success criteria of the project.</li> <li>Validate and approve deliverables at governance checkpoints.</li> <li> <p>Make critical decisions and resolve conflicts or ambiguities.</p> </li> <li> <p>Human Development Team</p> </li> <li>Collaborates with AI agents in the execution of technical and creative tasks.</li> <li>Supervises, reviews, and validates the proposals and results generated by AI.</li> <li> <p>Provides experience, context, and judgment in decision-making.</p> </li> <li> <p>Specialized AI Agents</p> </li> <li>Perform automated tasks in analysis, design, implementation, testing, documentation, operations, and governance.</li> <li>Propose solutions, detect incidents, and generate recommendations for the human team.</li> <li> <p>Maintain detailed records of their actions and decisions for audit and traceability.</p> </li> <li> <p>Governance Leader/Coordinator</p> </li> <li>Orchestrates collaboration between humans and AI agents.</li> <li>Ensures compliance with the principles, processes, and checkpoints of the methodology.</li> <li>Facilitates continuous improvement and the resolution of organizational or technical problems.</li> </ol>"},{"location":"methodology/types-of-agents/","title":"Types of Agents","text":"<p>The methodology HugAI defines several types of AI agents, each specialized in a phase or function of the development lifecycle:</p> <ol> <li>Analysis Agents</li> <li>Refine requirements, analyze needs, and validate the project context (e.g., Requirements Analyzer, Domain Expert, Prompt Refiner).</li> <li>Design Agents</li> <li>Propose architectures, design components, and define interfaces (e.g., Architecture Agent, Router Agent).</li> <li>Implementation Agents</li> <li>Generate code, integrate modules, and produce technical documentation (e.g., Implementation Agent, Integration Agent, Documentation Writer).</li> <li>Quality Agents</li> <li>Generate and execute tests, analyze security and performance, review code (e.g., Test Agent, Security Agent, Performance Agent, Internal Reviewer).</li> <li>Operations Agents</li> <li>Automate deployments, monitor systems, and manage maintenance (e.g., Deployment Agent, DevOps Agent, Maintenance Agent, Observability Agent).</li> <li>Governance Agents</li> <li>Oversee compliance, manage risks, and escalate incidents (e.g., Compliance Agent, Risk Management Agent, Escalation Manager).</li> </ol> <p>Each agent operates under governance rules and collaborates with humans and other agents to maximize value and security in each phase of the lifecycle.</p>"},{"location":"methodology/workflows/","title":"Workflows","text":"<p>In HugAI, workflows are based on the dynamic orchestration between AI agents and humans, ensuring that each task passes through the appropriate control and validation points:</p> <ol> <li>Start and Assignment</li> <li>A human or agent initiates the workflow, defines the objective, and assigns tasks to the corresponding specialized agents.</li> <li>Collaborative Execution</li> <li>Agents perform automated tasks (analysis, code generation, testing, etc.) and report results or recommendations.</li> <li>Humans review, validate, or request adjustments to the results generated by the AI.</li> <li>Governance Checkpoints</li> <li>At key points in the workflow, human intervention is required to approve, reject, or request revisions before moving to the next phase.</li> <li>Escalation and Incident Resolution</li> <li>If an agent detects a problem beyond its scope, it escalates the incident to a human or a governance agent for resolution.</li> <li>Closure and Feedback</li> <li>At the end of the workflow, results, lessons learned, and improvement opportunities are documented to provide feedback to the system and agents.</li> </ol> <p>This model allows for flexibility, adaptability, and control, ensuring that automation never replaces human supervision and judgment, but rather enhances them.</p>"},{"location":"protocol/","title":"HugAI Protocol v2","text":""},{"location":"protocol/#introduction","title":"Introduction","text":"<p>The HugAI Protocol is an open specification designed to enable interoperability, orchestration, and governance of artificial intelligence agents in software development. Inspired by the Language Server Protocol (LSP), HugAI aims to standardize communication between tools, agents, and humans, allowing multiple AI systems to collaborate securely, audibly, and under human control.</p> <p>The protocol defines how AI agents register, negotiate capabilities, exchange messages, and integrate into workflows governed by humans. Its goal is to enable scalable AI adoption in development environments, reduce vendor lock-in, and create an open ecosystem where agents, tools, and humans can collaborate transparently and efficiently.</p> <p>HugAI is designed to be extensible, adaptable to different domains, and compatible with multiple transport technologies (HTTP, WebSocket, STDIO), following principles of modularity, security, and traceability.</p>"},{"location":"protocol/#protocol-objectives","title":"Protocol Objectives","text":"<p>The main objectives of the HugAI protocol technical specification are:</p> <ol> <li>Standardize communication between AI agents, tools, and humans</li> <li>Define a common language and interoperable message formats to facilitate integration of multiple systems and vendors.</li> <li>Enable multi-agent orchestration and collaboration</li> <li>Allow specialized agents to work together, share context, and coordinate tasks within human-governed workflows.</li> <li>Ensure governance and human control</li> <li>Include mechanisms for approval, auditing, and traceability to ensure that critical decisions are supervised and validated by people.</li> <li>Promote extensibility and adaptability</li> <li>Design the protocol to evolve, incorporate new capabilities, and adapt to different domains and technologies.</li> <li>Ensure security and integrity of interactions</li> <li>Provide authentication, authorization, and protection against malicious or accidental actions.</li> <li>Reduce vendor lock-in and foster an open ecosystem</li> <li>Enable interoperability between agents and tools from different vendors, facilitating adoption and collaborative innovation.</li> </ol>"},{"location":"protocol/#general-architecture","title":"General Architecture","text":"<p>The HugAI protocol is based on a modular, layered architecture inspired by the Language Server Protocol (LSP) and the JSON-RPC 2.0 standard. This architecture separates responsibilities, facilitates extensibility, and ensures interoperability between different agents, tools, and platforms.</p>"},{"location":"protocol/#main-components","title":"Main Components:","text":"<ul> <li>AI Agents: Specialized entities that perform tasks, process messages, and collaborate in workflows.</li> <li>Coordinator/Gateway: Central node (optional) that orchestrates communication, routes messages, and enforces governance rules.</li> <li>Clients/Tools: User interfaces, IDEs, CI/CD systems, or other applications that interact with agents via the protocol.</li> <li>Human Stakeholders: People who supervise, validate, and make decisions at defined control points.</li> </ul>"},{"location":"protocol/#architecture-layers","title":"Architecture Layers:","text":"<ol> <li>Transport Layer: Defines the physical communication mechanisms (HTTP, WebSocket, STDIO, etc.).</li> <li>Messaging Layer (JSON-RPC 2.0): Standardizes the format of messages, requests, responses, and notifications.</li> <li>Agent Communication Layer: Manages registration, discovery, and capability negotiation between agents.</li> <li>Governance and Approvals Layer: Implements human control flows, auditing, and validation checkpoints.</li> <li>Tool Integration Layer: Enables connection with external systems (IDEs, CI/CD, monitoring, etc.).</li> <li>Multi-Agent Orchestration Layer: Coordinates collaboration and task flow between multiple agents and humans.</li> </ol> <p>This architecture allows the protocol to evolve, incorporate new features, and adapt to different use cases, always maintaining traceability, security, and human control as fundamental principles.</p>"},{"location":"protocol/#protocol-layers","title":"Protocol Layers","text":"<p>The main layers of the HugAI protocol are described below:</p> <ol> <li>Transport Layer</li> <li>Provides the physical and logical channels for message transmission between agents, tools, and humans. Supports HTTP, WebSocket, STDIO, and other mechanisms depending on the environment and integration needs.</li> <li>Messaging Layer (JSON-RPC 2.0)</li> <li>Defines the standard format for messages (requests, responses, notifications) and ensures interoperability between different participants. Allows structured extension of methods and parameters.</li> <li>Agent Communication Layer</li> <li>Manages registration, discovery, capability negotiation, and direct communication between agents. Allows agents to announce themselves, describe their functions, and collaborate on complex tasks.</li> <li>Governance and Approvals Layer</li> <li>Implements mechanisms for human control, validation checkpoints, auditing, and traceability. Allows definition of approval, escalation, and review rules at each workflow phase.</li> <li>Tool Integration Layer</li> <li>Facilitates connection and communication with external systems such as IDEs, CI/CD pipelines, monitoring platforms, etc. Enables integration of events, commands, and results from third-party tools.</li> <li>Multi-Agent Orchestration Layer</li> <li>Coordinates collaboration between multiple agents and humans, managing task flow, responsibility assignment, and resolution of dependencies or conflicts.</li> </ol> <p>Each layer can evolve independently, allowing the protocol to adapt to new scenarios, technologies, and requirements without compromising compatibility or security.</p>"},{"location":"protocol/#message-types","title":"Message Types","text":"<p>The HugAI protocol defines several main message types, each with a specific purpose within workflows and governance:</p> <ol> <li>Initialization (<code>initialize</code>)</li> <li>Message to establish connection, negotiate capabilities, and share context information between agents, clients, and the coordinator.</li> <li>Agent Registration (<code>agent/register</code>)</li> <li>Allows agents to announce themselves, describe their capabilities, and become available for specific tasks.</li> <li>Requests (<code>request</code>)</li> <li>Messages to request task execution, obtain information, or initiate flows between agents and tools.</li> <li>Responses (<code>response</code>)</li> <li>Return messages with results, data, or states derived from a previous request.</li> <li>Events (<code>event</code>)</li> <li>Notifications about state changes, incidents, progress, or any relevant event in the system.</li> <li>Approvals and Checkpoints (<code>governance/approval</code>)</li> <li>Messages to manage human control points, approvals, reviews, and auditing of critical decisions.</li> <li>Tool Integration (<code>tool/integration</code>)</li> <li>Messages to interact with external systems, execute commands, receive results, or integrate events from third-party tools.</li> <li>Audit and Traceability (<code>audit/log</code>)</li> <li>Messages to record actions, decisions, and relevant events, ensuring traceability and regulatory compliance.</li> </ol> <p>Each message type can have subtypes, parameters, and extensions depending on the use case and protocol evolution. All messages follow the structured JSON-RPC 2.0 format to ensure interoperability and extensibility.</p>"},{"location":"protocol/#agents-and-capabilities","title":"Agents and Capabilities","text":"<p>In the HugAI protocol, agents are autonomous or semi-autonomous entities that offer specialized capabilities (analysis, design, implementation, testing, operations, governance, etc.). Managing their capabilities is fundamental for efficient and secure workflow orchestration.</p>"},{"location":"protocol/#agent-registration","title":"Agent Registration","text":"<ul> <li>Each agent must register in the system (directly or via a coordinator), announcing its identity, type, capabilities, and supported governance level.</li> <li>Registration includes metadata such as name, version, author, description, supported tasks, inputs/outputs, and configuration requirements.</li> </ul>"},{"location":"protocol/#capability-description-and-negotiation","title":"Capability Description and Negotiation","text":"<ul> <li>An agent's capabilities are described using a structured schema (e.g., list of tasks, supported data types, constraints, dependencies).</li> <li>During initialization or at runtime, agents can negotiate capabilities with other agents or tools, allowing dynamic adaptation to different flows and contexts.</li> <li>Negotiation may include: task assignment, delegation, escalation, or parameter adjustment based on system availability and context.</li> </ul>"},{"location":"protocol/#dynamic-update-and-discovery","title":"Dynamic Update and Discovery","text":"<ul> <li>The protocol supports dynamic capability updates (e.g., when an agent learns a new task or its model is updated).</li> <li>Agents and tools can discover and query the capabilities of other registered agents at any time, facilitating collaboration and system resilience.</li> </ul> <p>This structured and dynamic capability management enables building flexible, scalable, and secure ecosystems where each agent adds value in a controlled and auditable manner.</p>"},{"location":"protocol/#communication-flows","title":"Communication Flows","text":"<p>The HugAI protocol defines structured communication flows to ensure coordination, traceability, and governance throughout the lifecycle:</p> <ol> <li>Initialization</li> <li>An agent or tool initiates the connection, negotiates capabilities, and establishes the working context.</li> <li>Task Orchestration</li> <li>Agents coordinate task assignment, execution, and tracking, sharing context and results according to governance rules.</li> <li>Governance Checkpoints</li> <li>At critical points, human intervention is required to approve, reject, or request reviews before proceeding.</li> <li>Escalation and Incident Resolution</li> <li>If an agent detects a problem beyond its scope, it escalates the incident to a human or governance agent for resolution.</li> <li>Closure and Audit</li> <li>At the end of a flow, results, decisions, and learnings are recorded for auditing and continuous improvement.</li> </ol> <p>These flows ensure that automation is always under human control and that all actions are traceable and auditable.</p>"},{"location":"protocol/#security-and-governance","title":"Security and Governance","text":"<p>Security and governance are fundamental pillars of the HugAI protocol:</p> <ul> <li>Authentication and Authorization: All agents and tools must authenticate and be authorized to participate in flows. The use of tokens, certificates, or equivalent mechanisms is recommended.</li> <li>Traceability and Auditing: All actions, decisions, and relevant events must be recorded to enable auditing, regulatory compliance, and forensic analysis.</li> <li>Human Control: Control points, approvals, and human reviews are mandatory for critical or sensitive tasks.</li> <li>Permission and Role Management: The protocol allows defining granular roles and permissions to limit the scope of each agent or tool.</li> <li>Protection against Bias and Errors: Cross-validation and human review are recommended to mitigate risks associated with AI model biases or errors.</li> </ul>"},{"location":"protocol/#extensibility-and-versioning","title":"Extensibility and Versioning","text":"<p>The HugAI protocol is designed to evolve and adapt:</p> <ul> <li>Message Extension: New message types, methods, and parameters can be added without breaking compatibility with previous versions.</li> <li>Version Negotiation: During initialization, participants negotiate the protocol version and supported extensions.</li> <li>Custom Capabilities: Agents can announce and negotiate specific capabilities, enabling integration of new functions or domains.</li> <li>Deprecation and Migration: Mechanisms are defined to deprecate messages or capabilities and migrate to new versions in a controlled manner.</li> </ul>"},{"location":"protocol/#implementation-examples","title":"Implementation Examples","text":"<p>Below are minimal examples of messages and flows:</p> <ul> <li> <p>Agent Initialization: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"agentId\": \"test-agent-1\",\n    \"capabilities\": [\"code-generation\", \"testing\"],\n    \"governanceLevel\": \"supervised\"\n  }\n}\n</code></pre></p> </li> <li> <p>Task Request: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/request\",\n  \"params\": {\n    \"sourceAgent\": \"test-agent-1\",\n    \"targetAgent\": \"test-agent-2\",\n    \"task\": \"generate-tests\",\n    \"context\": {\"file\": \"main.ts\"},\n    \"priority\": \"high\"\n  }\n}\n</code></pre></p> </li> <li> <p>Human Approval: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"governance/approval\",\n  \"params\": {\n    \"checkpoint\": \"code-review\",\n    \"artifact\": {\"file\": \"main.ts\", \"diff\": \"...\"},\n    \"approver\": \"user-123\",\n    \"decision\": \"approved\",\n    \"feedback\": \"Looks good.\"\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"protocol/#roadmap-and-future-extensions","title":"Roadmap and Future Extensions","text":"<ul> <li>Integration with advanced identity and permission systems.</li> <li>Support for new types of agents and capabilities (e.g., compliance agents, explainability agents).</li> <li>Extension to domains beyond software development (e.g., operations, security, data science).</li> <li>Protocol validation, simulation, and testing tools.</li> <li>Community and marketplace of certified agents.</li> <li>Integration with emerging standards for responsible and ethical AI.</li> </ul> <p>NOTE: This document is the starting point for version 2 of the HugAI protocol. Each section will be completed and improved iteratively.</p>"},{"location":"protocol/specification/","title":"HugAI Protocol Technical Specification","text":"<p>This folder contains the comprehensive and standardized specification of the HugAI protocol, inspired by the LSP structure.</p>"},{"location":"protocol/specification/#specification-index","title":"Specification Index","text":"<ul> <li>1. Introduction and Scope</li> <li>2. Base Types and Structures</li> <li>3. Protocol Messages</li> <li>4. Flows and Sequences</li> <li>5. Configuration and Global Variables</li> <li>6. Enumerations and Constants</li> <li>7. Errors and Exception Handling</li> <li>8. Examples and Use Cases</li> <li>9. Extensibility and Versioning</li> <li>10. Security and Governance</li> </ul> <p>Each section details the protocol's components, fields, flows, and rules, with examples and diagrams where relevant.</p> <p>Note: This specification is under iterative development. If you have suggestions or find ambiguities, please contribute or open an issue.</p>"},{"location":"protocol/specification/agents/","title":"Agents and Roles in HugAI","text":"<p>Note: This document complements the HugAI methodology and specification, detailing the types of agents, their roles, capabilities, and collaboration examples.</p>"},{"location":"protocol/specification/agents/#types-of-specialized-agents","title":"Types of Specialized Agents","text":"Agent Type Description Example Tasks/Capabilities Analysis Analyze requirements, context, and project needs Requirements extraction, validation, prompt refinement, domain analysis Design Propose architectures, models, and solution paths Architecture design, data modeling, API definition, task routing Implementation Generate code, integrate APIs, write documentation Code generation, service integration, automatic documentation Quality Evaluate and improve software quality Test generation and execution, security analysis, code review, performance Operations Manage deployments, monitoring, and maintenance Deployment, CI/CD, monitoring, maintenance, observability Governance Oversee compliance, risks, and critical points Compliance, risk management, auditing, approval management, escalation"},{"location":"protocol/specification/agents/#concrete-examples-of-agents-and-collaboration","title":"Concrete Examples of Agents and Collaboration","text":"<ul> <li>Requirements Analyzer: Extracts and validates requirements from user descriptions.</li> <li>Domain Expert: Provides domain-specific knowledge (e.g., health, finance).</li> <li>Prompt Refiner: Optimizes prompts for generative agents.</li> <li>Architecture Agent: Proposes and validates software architectures.</li> <li>Router Agent: Assigns tasks to the most suitable agent according to context.</li> <li>Code Generator: Generates source code from specifications.</li> <li>Integration Agent: Manages integration of APIs and external services.</li> <li>Documentation Writer: Generates technical and user documentation.</li> <li>Test Agent: Creates and executes unit, integration, and end-to-end tests.</li> <li>Security Agent: Performs vulnerability analysis and policy compliance.</li> <li>Performance Agent: Evaluates performance and proposes optimizations.</li> <li>Code Reviewer: Reviews the quality and style of generated code.</li> <li>Deployment Agent: Automates deployment in different environments.</li> <li>DevOps Agent: Orchestrates CI/CD pipelines and operations.</li> <li>Maintenance Agent: Monitors system health and applies patches.</li> <li>Observability Agent: Configures and monitors metrics and logs.</li> <li>Compliance Agent: Verifies regulatory and compliance adherence.</li> <li>Risk Management Agent: Assesses risks and proposes mitigations.</li> <li>Escalation Manager: Manages critical incidents and escalations.</li> </ul>"},{"location":"protocol/specification/agents/#example-of-collaboration-and-workflows","title":"Example of Collaboration and Workflows","text":"<ol> <li>Typical development flow:</li> <li>Requirements Analyzer extracts requirements \u2192 Architecture Agent designs the solution \u2192 Code Generator implements \u2192 Test Agent validates \u2192 Code Reviewer reviews \u2192 Deployment Agent deploys.</li> <li>Governance checkpoints:</li> <li>Compliance Agent and Risk Management Agent may require human approval before proceeding.</li> <li>Escalation Manager intervenes if there are critical incidents.</li> <li>Dynamic collaboration:</li> <li>Router Agent can reassign tasks based on availability or specialization.</li> <li>Observability Agent and Maintenance Agent collaborate to maintain system health.</li> </ol> <p>Note: Agents can be implemented as independent services, modules, or integrations, and their collaboration is orchestrated by the HugAI protocol, respecting governance levels and defined checkpoints.</p>"},{"location":"protocol/specification/configuration/","title":"5. Configuration and Variables - HugAI v2 Specification","text":"<p>This section describes how to configure the system, agents, and key variables in the HugAI v2 protocol.</p>"},{"location":"protocol/specification/configuration/#51-general-description","title":"5.1. General Description","text":"<p>Configuration in HugAI v2 allows adapting the behavior of agents, clients, and the central system. It can be managed through files (JSON/YAML), environment variables, or runtime parameters.</p>"},{"location":"protocol/specification/configuration/#52-global-and-environment-variables","title":"5.2. Global and Environment Variables","text":"Variable Type Description governanceLevel string Governance level: autonomous, supervised, human-in-the-loop workspaceFolders string[] Associated workspace folder paths capabilities object Enabled capabilities for the agent or system logging.level string Log level: error, warn, info, debug, trace logging.path string Path to the log file integration.tools object[] Integrated external tools agentId string Unique identifier for the agent agentSecret string Token/key for authentication (if applicable) environment string Environment: development, staging, production"},{"location":"protocol/specification/configuration/#53-example-configuration-file-json","title":"5.3. Example Configuration File (JSON)","text":"<pre><code>{\n  \"agentId\": \"demo-agent-1\",\n  \"governanceLevel\": \"supervised\",\n  \"workspaceFolders\": [\"/project/demo\"],\n  \"capabilities\": {\n    \"code-generation\": true,\n    \"testing\": true,\n    \"refactoring\": false\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"path\": \"./logs/agent.log\"\n  },\n  \"integration\": {\n    \"tools\": [\n      { \"name\": \"ci-pipeline\", \"enabled\": true },\n      { \"name\": \"static-analysis\", \"enabled\": false }\n    ]\n  },\n  \"environment\": \"development\"\n}\n</code></pre>"},{"location":"protocol/specification/configuration/#54-key-parameters","title":"5.4. Key Parameters","text":"<ul> <li>governanceLevel: Defines the degree of human intervention. Typical values:</li> <li><code>autonomous</code>: The agent acts without human intervention.</li> <li><code>supervised</code>: Requires reviews or approvals at critical points.</li> <li> <p><code>human-in-the-loop</code>: Every relevant action requires human approval.</p> </li> <li> <p>workspaceFolders: Working directories operated on by the agent.</p> </li> <li> <p>capabilities: Enabled functionalities (e.g., code-generation, testing, refactoring).</p> </li> <li> <p>logging: Log configuration for auditing and debugging.</p> </li> <li> <p>integration.tools: External tools available to the agent.</p> </li> <li> <p>agentId / agentSecret: Identifiers and credentials for authentication and traceability.</p> </li> <li> <p>environment: Allows adapting behavior according to the environment (development, production, etc.).</p> </li> </ul>"},{"location":"protocol/specification/configuration/#55-best-practices-for-configuration-management","title":"5.5. Best Practices for Configuration Management","text":"<ul> <li>Use versioned and validated configuration files.</li> <li>Separate sensitive credentials (e.g., agentSecret) using environment variables.</li> <li>Document all parameters and possible values.</li> <li>Validate configuration at startup and upon dynamic changes.</li> <li>Allow parameter overrides via command line or environment variables.</li> <li>Keep configuration modular to facilitate extension and customization.</li> </ul> <p>Note: Configuration may evolve according to the needs of the system and agents. It is recommended to maintain backward compatibility and document changes.</p>"},{"location":"protocol/specification/enums-errors/","title":"7. Enumerations and Error Codes - HugAI v2 Specification","text":"<p>This section defines the key enumerations and standard error codes used in the HugAI v2 protocol.</p>"},{"location":"protocol/specification/enums-errors/#71-key-enumerations","title":"7.1. Key Enumerations","text":""},{"location":"protocol/specification/enums-errors/#governancelevel","title":"governanceLevel","text":"Value Description autonomous The agent acts without human intervention supervised Requires reviews/approvals at key points human-in-the-loop Every relevant action requires human approval manual Only suggests actions, human must execute them"},{"location":"protocol/specification/enums-errors/#decision-governance","title":"decision (governance)","text":"Value Description approved Approved rejected Rejected needs_revision Requires review/changes"},{"location":"protocol/specification/enums-errors/#priority","title":"priority","text":"Value Description low Low priority medium Medium priority high High priority critical Critical/urgent"},{"location":"protocol/specification/enums-errors/#logginglevel","title":"logging.level","text":"Value Description error Only severe errors warn Warnings info General information debug Detailed debugging trace Full traces"},{"location":"protocol/specification/enums-errors/#environment","title":"environment","text":"Value Description development Development environment staging Pre-production/testing production Production"},{"location":"protocol/specification/enums-errors/#72-standard-error-codes","title":"7.2. Standard Error Codes","text":"Code Name Description Typical Use -32700 Parse Error Error parsing the JSON message Malformed JSON -32600 Invalid Request The request is not valid Incorrect format -32601 Method Not Found The requested method does not exist Method not implemented -32602 Invalid Params Invalid or missing parameters Validation error -32603 Internal Error Internal system/agent error Unexpected exception -32000 Governance Required Human intervention/approval required Missing approval -32001 Capability Not Allowed Capability not allowed for the agent Permission restriction -32002 Tool Integration Error Error interacting with external tool Integration failure -32003 Audit Log Failure Could not log to audit Traceability issue -32010 Agent Not Found The requested agent does not exist or is unavailable Routing or registration error -32011 Governance Violation Governance policy violation Action not allowed by rules -32012 Human Approval Required Explicit human approval required Mandatory checkpoint -32013 Workflow State Error Inconsistent workflow state Invalid phase or transition"},{"location":"protocol/specification/enums-errors/#73-example-usage-in-messages","title":"7.3. Example Usage in Messages","text":"<p>Unsupported method error: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": { \"code\": -32601, \"message\": \"Method not supported\" }\n}\n</code></pre></p> <p>Governance required error: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"error\": { \"code\": -32000, \"message\": \"Human approval required\" }\n}\n</code></pre></p> <p>Agent not found error: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"error\": { \"code\": -32010, \"message\": \"The requested agent does not exist\" }\n}\n</code></pre></p> <p>Tool integration error: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6,\n  \"error\": { \"code\": -32002, \"message\": \"Error interacting with external tool\" }\n}\n</code></pre></p> <p>Note: Negative codes follow the JSON-RPC convention. Additional codes may be defined as needed by the system and protocol evolution.</p>"},{"location":"protocol/specification/examples/","title":"10. Usage Examples and Practical Cases - HugAI v2 Specification","text":"<p>This section presents complete examples and practical use cases of the HugAI v2 protocol, with JSON messages and sequence diagrams.</p>"},{"location":"protocol/specification/examples/#101-complete-cycle-initialization-registration-request-approval-and-audit","title":"10.1. Complete Cycle: Initialization, Registration, Request, Approval, and Audit","text":"<p>Flow: An agent is initialized, registered, requests a task that requires human approval, and everything is audited.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant Protocol\n    participant Agent\n    participant Human\n    participant Audit\n    Client-&gt;&gt;Protocol: initialize\n    Protocol--&gt;&gt;Client: response\n    Client-&gt;&gt;Protocol: agent/register\n    Protocol--&gt;&gt;Client: response\n    Client-&gt;&gt;Protocol: agent/request (critical task)\n    Protocol-&gt;&gt;Human: governance/approval\n    Human--&gt;&gt;Protocol: governance/approval (decision)\n    Protocol--&gt;&gt;Client: response\n    Protocol-&gt;&gt;Audit: audit/log</code></pre> <p>JSON Messages: - <code>initialize</code>, <code>agent/register</code>, <code>agent/request</code>, <code>governance/approval</code>, <code>response</code>, <code>audit/log</code></p>"},{"location":"protocol/specification/examples/#102-integration-with-external-tool-cicd","title":"10.2. Integration with External Tool (CI/CD)","text":"<p>Flow: An agent requests to run tests on a CI/CD tool and receives the result.</p> <pre><code>sequenceDiagram\n    participant Agent\n    participant Protocol\n    participant CI\n    Agent-&gt;&gt;Protocol: tool/integration (run-tests)\n    Protocol-&gt;&gt;CI: tool/integration (run-tests)\n    CI--&gt;&gt;Protocol: response (result)\n    Protocol--&gt;&gt;Agent: response (result)</code></pre> <p>Request message: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tool/integration\",\n  \"params\": {\n    \"tool\": \"ci-pipeline\",\n    \"action\": \"run-tests\",\n    \"data\": { \"branch\": \"main\" }\n  },\n  \"id\": 20\n}\n</code></pre></p>"},{"location":"protocol/specification/examples/#103-human-governance-case","title":"10.3. Human Governance Case","text":"<p>Flow: An agent generates code, but requires human review and approval before integration.</p> <pre><code>sequenceDiagram\n    participant Agent\n    participant Protocol\n    participant Human\n    Agent-&gt;&gt;Protocol: agent/request (code-generation)\n    Protocol-&gt;&gt;Human: governance/approval (code review)\n    Human--&gt;&gt;Protocol: governance/approval (approved/rejected)\n    Protocol--&gt;&gt;Agent: response</code></pre> <p>Approval message: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"governance/approval\",\n  \"params\": {\n    \"checkpoint\": \"code-review\",\n    \"artifact\": { \"file\": \"main.ts\", \"diff\": \"...\" },\n    \"approver\": \"user-123\",\n    \"decision\": \"approved\",\n    \"feedback\": \"Meets the standards.\"\n  },\n  \"id\": 21\n}\n</code></pre></p>"},{"location":"protocol/specification/examples/#104-extensioncustomization-example","title":"10.4. Extension/Customization Example","text":"<p>Flow: A specialized agent performs a security analysis using a custom message.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant Protocol\n    participant SecurityAgent\n    Client-&gt;&gt;Protocol: agent/securityScan (custom)\n    Protocol-&gt;&gt;SecurityAgent: agent/securityScan\n    SecurityAgent--&gt;&gt;Protocol: response (result)\n    Protocol--&gt;&gt;Client: response (result)</code></pre> <p>Custom message: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/securityScan\",\n  \"params\": {\n    \"target\": \"main.ts\",\n    \"level\": \"deep\"\n  },\n  \"id\": 22\n}\n</code></pre></p> <p>Note: These examples can be adapted and expanded according to use scenarios and protocol evolution.</p>"},{"location":"protocol/specification/extensibility/","title":"8. Extensibility and Customization - HugAI v2 Specification","text":"<p>This section describes how the HugAI v2 protocol can be extended and customized to adapt to new needs, agents, capabilities, and scenarios.</p>"},{"location":"protocol/specification/extensibility/#81-principles-of-extensibility","title":"8.1. Principles of Extensibility","text":"<ul> <li>The protocol is designed to be modular and evolutionary.</li> <li>It allows the addition of new message types, capabilities, agents, and workflows without breaking existing compatibility.</li> <li>It is recommended to follow naming conventions and document all extensions.</li> </ul>"},{"location":"protocol/specification/extensibility/#82-adding-new-message-types-or-capabilities","title":"8.2. Adding New Message Types or Capabilities","text":"<ul> <li>New messages: Additional methods can be defined following the JSON-RPC scheme, for example: <code>agent/customAction</code>, <code>tool/notify</code>, etc.</li> <li>New capabilities: Agents can announce additional capabilities in their registration (<code>capabilities</code>), for example: <code>\"code-review\": true</code>.</li> <li>New agents: Simply register the agent and its capabilities, following the standard flow.</li> </ul>"},{"location":"protocol/specification/extensibility/#83-extension-example-custom-message","title":"8.3. Extension Example (Custom Message)","text":"<p>Definition of a new message for security analysis:</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/securityScan\",\n  \"params\": {\n    \"target\": \"main.ts\",\n    \"level\": \"deep\"\n  },\n  \"id\": 10\n}\n</code></pre> <p>The agent can announce the new capability: <pre><code>{\n  \"agentId\": \"security-agent-1\",\n  \"capabilities\": { \"security-scan\": true }\n}\n</code></pre></p>"},{"location":"protocol/specification/extensibility/#84-best-practices-for-extension-and-compatibility","title":"8.4. Best Practices for Extension and Compatibility","text":"<ul> <li>Use clear prefixes for custom methods (<code>agent/</code>, <code>tool/</code>, <code>governance/</code>, etc.).</li> <li>Document each extension and its purpose.</li> <li>Maintain backward compatibility whenever possible.</li> <li>Validate extensions before deploying them in critical environments.</li> <li>Share useful extensions with the community for possible standardization.</li> </ul>"},{"location":"protocol/specification/extensibility/#85-interoperability-and-modularity","title":"8.5. Interoperability and Modularity","text":"<ul> <li>Extensions should be optional and negotiable between agents and the system.</li> <li>Agents are recommended to ignore unknown messages/fields unless they are critical.</li> <li>Modularizing capabilities and workflows facilitates integration with other systems and protocol evolution.</li> </ul> <p>Note: Extensibility is key to the evolution of the protocol. It is recommended to keep a record of extensions and promote interoperability between implementations.</p>"},{"location":"protocol/specification/flows/","title":"4. Communication Flows and Sequences - HugAI v2 Specification","text":"<p>This section describes the main communication flows between agents, humans, and tools in the HugAI v2 protocol, using sequence diagrams and examples.</p>"},{"location":"protocol/specification/flows/#40-table-of-phases-agents-and-checkpoints","title":"4.0. Table of Phases, Agents, and Checkpoints","text":"Phase Main Agents Governance Checkpoints Brief Description Analysis Requirements Analyzer, Domain Expert Requirements Review Extraction and validation of requirements, context Design Architecture Agent, Router Agent Architecture Approval Architecture, models, and API design Implementation Code Generator, Integration Agent, Documentation Writer Code and documentation review Code generation, integration, documentation Quality Test Agent, Security Agent, Performance Agent, Code Reviewer Quality and security approval Testing, security analysis, performance, review Operations Deployment Agent, DevOps Agent, Maintenance Agent, Observability Agent Deployment approval, monitoring Deployment, CI/CD, monitoring, maintenance Governance Compliance Agent, Risk Management Agent, Escalation Manager Audit, compliance, risk management Supervision, compliance, incident management"},{"location":"protocol/specification/flows/#401-phases-agents-and-checkpoints-diagram","title":"4.0.1. Phases, Agents, and Checkpoints Diagram","text":"<pre><code>flowchart TD\n    A[Analysis] --&gt;|Validated requirements| B[Design]\n    B --&gt;|Architecture approved| C[Implementation]\n    C --&gt;|Code reviewed| D[Quality]\n    D --&gt;|Quality approved| E[Operations]\n    E --&gt;|Deployment approved| F[End]\n    subgraph Checkpoints\n      A1[Requirements review]\n      B1[Architecture approval]\n      C1[Code review]\n      D1[Quality approval]\n      E1[Deployment approval]\n      F1[Audit/Compliance]\n    end\n    A --&gt; A1\n    B --&gt; B1\n    C --&gt; C1\n    D --&gt; D1\n    E --&gt; E1\n    F --&gt; F1</code></pre>"},{"location":"protocol/specification/flows/#402-explanation-of-phases-and-collaboration","title":"4.0.2. Explanation of Phases and Collaboration","text":"<ul> <li>Analysis: Analysis agents extract and validate requirements, with human review if needed.</li> <li>Design: Design agents propose architectures and models, subject to stakeholder approval.</li> <li>Implementation: Implementation agents generate code and documentation, reviewed by quality agents and humans.</li> <li>Quality: Quality agents run tests, security and performance analysis, with approval checkpoints.</li> <li>Operations: Operations agents deploy, monitor, and maintain the system, with approvals for critical deployments.</li> <li>Governance: Governance agents oversee compliance, risks, and manage incidents, with audit and final checkpoints.</li> </ul>"},{"location":"protocol/specification/flows/#41-agent-initialization-and-registration","title":"4.1. Agent Initialization and Registration","text":"<p>Description: A client or agent initiates the connection, negotiates capabilities, and registers in the system.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant Protocol\n    participant Agent\n    Client-&gt;&gt;Protocol: initialize\n    Protocol--&gt;&gt;Client: response (ack)\n    Client-&gt;&gt;Protocol: agent/register\n    Protocol--&gt;&gt;Client: response (successful registration)\n    Protocol-&gt;&gt;Agent: new agent notification (optional)</code></pre> <p>Example messages: - <code>initialize</code> - <code>agent/register</code> - <code>response</code></p>"},{"location":"protocol/specification/flows/#42-task-request-and-response-between-agents","title":"4.2. Task Request and Response Between Agents","text":"<p>Description: An agent requests another to execute a task and receives the response.</p> <pre><code>sequenceDiagram\n    participant AgentA\n    participant Protocol\n    participant AgentB\n    AgentA-&gt;&gt;Protocol: agent/request (task)\n    Protocol-&gt;&gt;AgentB: agent/request (task)\n    AgentB--&gt;&gt;Protocol: response (result)\n    Protocol--&gt;&gt;AgentA: response (result)</code></pre> <p>Example messages: - <code>agent/request</code> - <code>response</code></p>"},{"location":"protocol/specification/flows/#43-governance-flow-and-human-approval","title":"4.3. Governance Flow and Human Approval","text":"<p>Description: An agent or the system requests human approval for an artifact or critical decision.</p> <pre><code>sequenceDiagram\n    participant Agent\n    participant Protocol\n    participant Human\n    Agent-&gt;&gt;Protocol: governance/approval (request)\n    Protocol-&gt;&gt;Human: approval notification\n    Human--&gt;&gt;Protocol: governance/approval (decision)\n    Protocol--&gt;&gt;Agent: response (decision)</code></pre> <p>Example messages: - <code>governance/approval</code> - <code>response</code></p>"},{"location":"protocol/specification/flows/#44-external-tool-integration","title":"4.4. External Tool Integration","text":"<p>Description: An agent interacts with an external tool (CI/CD, analysis, etc.) through the protocol.</p> <pre><code>sequenceDiagram\n    participant Agent\n    participant Protocol\n    participant Tool\n    Agent-&gt;&gt;Protocol: tool/integration (action)\n    Protocol-&gt;&gt;Tool: tool/integration (action)\n    Tool--&gt;&gt;Protocol: response (result)\n    Protocol--&gt;&gt;Agent: response (result)</code></pre> <p>Example messages: - <code>tool/integration</code> - <code>response</code></p>"},{"location":"protocol/specification/flows/#45-auditing-and-traceability","title":"4.5. Auditing and Traceability","text":"<p>Description: All relevant actions are logged for traceability and compliance.</p> <pre><code>sequenceDiagram\n    participant Actor\n    participant Protocol\n    participant Audit\n    Actor-&gt;&gt;Protocol: relevant action (any message)\n    Protocol-&gt;&gt;Audit: audit/log\n    Audit--&gt;&gt;Protocol: response (ack)</code></pre> <p>Example messages: - <code>audit/log</code> - <code>response</code></p> <p>Note: These flows can be combined and extended depending on the system's complexity and use cases.</p>"},{"location":"protocol/specification/glossary/","title":"11. Glossary and FAQ - HugAI v2 Specification","text":"<p>This section provides definitions of key terms and answers frequently asked questions about the HugAI v2 protocol.</p>"},{"location":"protocol/specification/glossary/#111-glossary-of-terms","title":"11.1. Glossary of Terms","text":"<ul> <li>Agent: Autonomous entity (software) that executes tasks, collaborates, and communicates via the protocol.</li> <li>Governance: Mechanisms and policies to supervise, approve, and audit actions of agents and humans.</li> <li>Capability: Specific functionality or task that an agent can announce and execute (e.g., code-generation, testing).</li> <li>Workspace: Set of folders or resources operated on by an agent.</li> <li>Approval: Process of human review and authorization for critical actions.</li> <li>Audit: Detailed record of actions, decisions, and events for traceability and compliance.</li> <li>Message: JSON structure exchanged between agents, humans, and tools following the protocol.</li> <li>Extension: Addition of new messages, capabilities, or workflows to the base protocol.</li> <li>Integration: Connection with external tools (CI/CD, analysis, etc.) via standard or custom messages.</li> <li>Human-in-the-loop: Model where human intervention is mandatory at critical points.</li> <li>Supervised: Model where human intervention is optional or at defined points.</li> <li>Autonomous: Model where agents act without human intervention.</li> </ul>"},{"location":"protocol/specification/glossary/#112-frequently-asked-questions-faq","title":"11.2. Frequently Asked Questions (FAQ)","text":"<p>What is HugAI v2 and what is it for?</p> <p>It is an open protocol to orchestrate AI agents and humans in development and automation processes, with governance and traceability.</p> <p>How is the protocol extended?</p> <p>By adding new types of messages, capabilities, or agents following the JSON-RPC scheme and documenting the extension.</p> <p>What security mechanisms exist?</p> <p>Authentication of agents and humans, message validation, auditing, use of encrypted channels, and secure secret management.</p> <p>Can I integrate my own tools?</p> <p>Yes, via <code>tool/integration</code> messages or custom extensions, always following best practices for validation and security.</p> <p>What happens if an agent receives an unknown message?</p> <p>It should ignore it (if not critical) or respond with a standard error, maintaining robustness and compatibility.</p> <p>How is configuration managed?</p> <p>Through files (JSON/YAML), environment variables, and runtime parameters, following the documented best practices.</p> <p>What governance levels exist?</p> <p>Autonomous, supervised, and human-in-the-loop, according to the required degree of human intervention.</p> <p>How are actions audited?</p> <p>Using the <code>audit/log</code> message to record actor, action, timestamp, details, and result in protected systems.</p> <p>Is the protocol compatible with JSON-RPC?</p> <p>Yes, it is based on JSON-RPC 2.0 for message structure and extensibility.</p> <p>Note: For additional questions, suggestions, or contributions, consult the official documentation or contact the protocol maintainers.</p>"},{"location":"protocol/specification/headers/","title":"Headers of the HugAI v2 Protocol","text":"<p>This section describes the structure and use of headers in the HugAI v2 protocol, ensuring compatibility and extensibility.</p>"},{"location":"protocol/specification/headers/#1-header-structure","title":"1. Header Structure","text":"<p>Messages in the HugAI v2 protocol follow a structure similar to LSP, separating headers and the message body. Headers are sent in plain text (ASCII), followed by a blank line (<code>\\r\\n</code>), and then the JSON content (body).</p>"},{"location":"protocol/specification/headers/#2-supported-headers-table","title":"2. Supported Headers Table","text":"Header Field Name Type Description Content-Length number Length of the JSON content in bytes. Required. Content-Type string MIME type of the content. Default: application/vscode-jsonrpc; charset=utf-8 HugAI-Version string HugAI protocol version. E.g.: 2.0.0 Governance-Level string Required governance level: autonomous, supervised, human-in-the-loop, manual Request-Id string/number Unique request identifier (optional, redundant with JSON-RPC) Custom-* string Custom headers for future extensions"},{"location":"protocol/specification/headers/#3-example-of-a-complete-message-headers-body","title":"3. Example of a Complete Message (Headers + Body)","text":"<pre><code>Content-Length: 234\\r\\n\nContent-Type: application/vscode-jsonrpc; charset=utf-8\\r\\n\nHugAI-Version: 2.0.0\\r\\n\nGovernance-Level: supervised\\r\\n\n\\r\\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"agent/register\",\n  \"params\": {\n    \"agentId\": \"architecture-agent\",\n    \"capabilities\": {\n      \"tasks\": [\"design\", \"review\"],\n      \"governanceLevel\": \"supervised\"\n    }\n  }\n}\n</code></pre>"},{"location":"protocol/specification/headers/#4-best-practices-and-compatibility","title":"4. Best Practices and Compatibility","text":"<ul> <li>All messages must include <code>Content-Length</code> and <code>Content-Type</code>.</li> <li>It is recommended to include <code>HugAI-Version</code> and <code>Governance-Level</code> for traceability and governance control.</li> <li>Custom headers should use the <code>Custom-</code> prefix to avoid collisions.</li> <li>The body must be valid JSON, encoded in UTF-8.</li> <li>Agents and servers should ignore unknown headers to maintain future compatibility.</li> <li>Header validation is critical for interoperability and security.</li> </ul> <p>Note: The header structure allows the protocol to be extended without breaking compatibility, facilitating evolution and adoption in different environments.</p>"},{"location":"protocol/specification/messages/","title":"3. Protocol Messages - HugAI v2 Specification","text":"<p>This section describes the main messages of the HugAI v2 protocol, their fields, purpose, and usage examples.</p>"},{"location":"protocol/specification/messages/#31-initialization-message-initialize","title":"3.1. Initialization Message (<code>initialize</code>)","text":"<p>Purpose: Establish the connection, negotiate capabilities, and share context information between agents, clients, and the system.</p> Field Type Required Description processId number Yes Client process identifier agentId string Yes Agent/client identifier capabilities object Yes Supported capabilities governanceLevel string Yes Requested governance level clientInfo object No Client information (name, version) workspaceFolders array No Associated workspace folders <p>Example: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"processId\": 12345,\n    \"agentId\": \"demo-agent-1\",\n    \"capabilities\": { \"code-generation\": true, \"testing\": true },\n    \"governanceLevel\": \"supervised\",\n    \"clientInfo\": { \"name\": \"HugAI Client\", \"version\": \"1.0.0\" },\n    \"workspaceFolders\": [\"/project/demo\"]\n  },\n  \"id\": 1\n}\n</code></pre></p>"},{"location":"protocol/specification/messages/#32-agent-registration-agentregister","title":"3.2. Agent Registration (<code>agent/register</code>)","text":"<p>Purpose: Register an agent in the system, announcing its capabilities and metadata.</p> Field Type Required Description agentId string Yes Unique agent identifier capabilities object Yes Supported capabilities and tasks governanceLevel string Yes Supported governance level version string No Agent version author string No Author or responsible team description string No Short description dependencies string[] No Other required agents <p>Example: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/register\",\n  \"params\": {\n    \"agentId\": \"advanced-agent-1\",\n    \"capabilities\": { \"code-generation\": true, \"testing\": true, \"refactoring\": true },\n    \"governanceLevel\": \"supervised\",\n    \"version\": \"1.2.0\",\n    \"author\": \"HugAI Team\",\n    \"description\": \"Advanced agent for code generation and refactoring\",\n    \"dependencies\": [\"test-agent\", \"review-agent\"]\n  },\n  \"id\": 2\n}\n</code></pre></p>"},{"location":"protocol/specification/messages/#33-task-request-agent-communication-agentrequest","title":"3.3. Task Request / Agent Communication (<code>agent/request</code>)","text":"<p>Purpose: Request the execution of a task or collaboration between agents.</p> Field Type Required Description sourceAgent string Yes Agent originating the request targetAgent string Yes Target agent task string Yes Task to execute context object No Additional context (files, data, etc.) priority string No Priority: low, medium, high, critical <p>Example: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/request\",\n  \"params\": {\n    \"sourceAgent\": \"demo-agent-1\",\n    \"targetAgent\": \"test-agent-2\",\n    \"task\": \"generate-tests\",\n    \"context\": { \"file\": \"main.ts\" },\n    \"priority\": \"high\"\n  },\n  \"id\": 3\n}\n</code></pre></p>"},{"location":"protocol/specification/messages/#34-response-response","title":"3.4. Response (<code>response</code>)","text":"<p>Purpose: Return the result of a previous request.</p> Field Type Required Description id string/number Yes Original request identifier result object No Operation result error object No Error object if the operation failed <p>Example (success): <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": { \"ack\": true, \"output\": \"Tests generated\" }\n}\n</code></pre> Example (error): <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": { \"code\": -32601, \"message\": \"Method not supported\" }\n}\n</code></pre></p>"},{"location":"protocol/specification/messages/#35-event-event","title":"3.5. Event (<code>event</code>)","text":"<p>Purpose: Notify state changes, incidents, progress, or relevant events.</p> Field Type Required Description event string Yes Event name data object No Data associated with the event <p>Example: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"event\",\n  \"params\": {\n    \"event\": \"task-progress\",\n    \"data\": { \"task\": \"generate-tests\", \"progress\": 50 }\n  }\n}\n</code></pre></p>"},{"location":"protocol/specification/messages/#36-governance-approval-governanceapproval","title":"3.6. Governance Approval (<code>governance/approval</code>)","text":"<p>Purpose: Manage human checkpoints, approvals, reviews, and auditing of critical decisions.</p> Field Type Required Description checkpoint string Yes Checkpoint name artifact object Yes Artifact or evidence to approve/review approver string Yes Human approver identifier decision string Yes approved, rejected, needs_revision feedback string No Comments or justification <p>Example: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"governance/approval\",\n  \"params\": {\n    \"checkpoint\": \"code-review\",\n    \"artifact\": { \"file\": \"main.ts\", \"diff\": \"...\" },\n    \"approver\": \"user-123\",\n    \"decision\": \"approved\",\n    \"feedback\": \"Meets the standards.\"\n  },\n  \"id\": 4\n}\n</code></pre></p>"},{"location":"protocol/specification/messages/#37-tool-integration-toolintegration","title":"3.7. Tool Integration (<code>tool/integration</code>)","text":"<p>Purpose: Interact with external systems, execute commands, receive results, or integrate third-party tool events.</p> Field Type Required Description tool string Yes External tool name action string Yes Action to execute data object No Data or parameters for the action callback string No Method/callback to receive the response <p>Example: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tool/integration\",\n  \"params\": {\n    \"tool\": \"ci-pipeline\",\n    \"action\": \"run-tests\",\n    \"data\": { \"branch\": \"feature-x\" },\n    \"callback\": \"event\"\n  },\n  \"id\": 5\n}\n</code></pre></p>"},{"location":"protocol/specification/messages/#38-audit-and-traceability-auditlog","title":"3.8. Audit and Traceability (<code>audit/log</code>)","text":"<p>Purpose: Record actions, decisions, and relevant events for traceability and compliance.</p> Field Type Required Description action string Yes Recorded action actor string Yes Responsible agent or human target string No Affected object or entity details object No Additional details timestamp string Yes Date and time (ISO 8601) <p>Example: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"audit/log\",\n  \"params\": {\n    \"action\": \"approval\",\n    \"actor\": \"user-123\",\n    \"target\": \"main.ts\",\n    \"details\": { \"decision\": \"approved\" },\n    \"timestamp\": \"2024-06-01T12:34:56Z\"\n  }\n}\n</code></pre></p> <p>Note: Each message must be validated against its structure and required fields. Examples may be extended as the protocol evolves.</p>"},{"location":"protocol/specification/roadmap/","title":"12. Roadmap and Evolution - HugAI v2 Specification","text":"<p>This section describes the roadmap, development phases, and future vision for the HugAI v2 protocol.</p>"},{"location":"protocol/specification/roadmap/#121-development-phases","title":"12.1. Development Phases","text":"<ul> <li>MVP (Minimum Viable Product): \u2705 [COMPLETED]</li> <li>Definition of the base protocol, main messages, and essential flows. \u2705</li> <li>Reference implementation (client, server, basic agents). \u23f3 [NEXT]</li> <li> <p>Initial documentation and examples. \u2705</p> </li> <li> <p>Beta: \u23f3 [NEXT]</p> </li> <li>Integration testing and feedback from pioneer users. \u23f3</li> <li>Improved security, validation, and extensibility. \u23f3</li> <li> <p>First integrations with external tools. \u23f3</p> </li> <li> <p>Standard:</p> </li> <li>Publication of the stable specification. \u23f3</li> <li>Backward compatibility. \u23f3</li> <li> <p>Expansion of use cases and advanced agents. \u23f3</p> </li> <li> <p>Adoption and Community:</p> </li> <li>Promotion, workshops, and expanded documentation. \u23f3</li> <li>Support for external contributions and open governance. \u23f3</li> </ul>"},{"location":"protocol/specification/roadmap/#122-key-milestones-and-deliverables","title":"12.2. Key Milestones and Deliverables","text":"<ul> <li>Complete and validated v2 specification. \u2705 [COMPLETED]</li> <li>Reference implementations (TypeScript/Node.js, other languages). \u23f3 [NEXT]</li> <li>Suite of examples and practical cases. \u2705</li> <li>Validation and testing tools. \u23f3</li> <li>Documentation and community portal. \u23f3</li> </ul>"},{"location":"protocol/specification/roadmap/#123-versioning-and-compatibility-plan","title":"12.3. Versioning and Compatibility Plan","text":"<ul> <li>Semantic versioning (semver): MAJOR.MINOR.PATCH \u2705</li> <li>Backward compatibility guaranteed in MINOR and PATCH versions. \u2705</li> <li>Incompatible changes only in MAJOR versions, with documented migration. \u2705</li> <li>Changelog and migration notes. \u23f3</li> </ul>"},{"location":"protocol/specification/roadmap/#124-community-and-contribution-strategy","title":"12.4. Community and Contribution Strategy","text":"<ul> <li>Open repository and transparent governance. \u2705</li> <li>Guides for contributing, reporting issues, and proposing extensions. \u23f3</li> <li>Review committee for major changes. \u23f3</li> <li>Promotion of interoperability and adoption in real projects. \u23f3</li> </ul>"},{"location":"protocol/specification/roadmap/#125-future-lines-and-vision","title":"12.5. Future Lines and Vision","text":"<ul> <li>New capabilities for agents (generative AI, advanced analysis, LLM integration). \u23f3</li> <li>Integration with other standards (LSP, OpenAPI, MLOps, etc.). \u23f3</li> <li>Advanced automation of workflows and dynamic governance. \u23f3</li> <li>Support for deployment in cloud, edge, and on-premise environments. \u23f3</li> <li>Expansion to domains beyond software development (government, health, education, etc.). \u23f3</li> </ul> <p>Note: The roadmap is dynamic and will be adjusted according to feedback, technological advances, and community needs.</p>"},{"location":"protocol/specification/security/","title":"9. Security and Validation - HugAI v2 Specification","text":"<p>This section describes the security and validation principles and mechanisms in the HugAI v2 protocol.</p>"},{"location":"protocol/specification/security/#91-security-principles","title":"9.1. Security Principles","text":"<ul> <li>Security by design: all messages and flows consider threats and data protection.</li> <li>Least privilege: agents and humans only access what is necessary.</li> <li>Traceability and auditing of all relevant actions.</li> </ul>"},{"location":"protocol/specification/security/#92-authentication-and-authorization","title":"9.2. Authentication and Authorization","text":"<ul> <li>Agents:</li> <li>Each agent must have a unique <code>agentId</code> and, optionally, an <code>agentSecret</code> or token for authentication.</li> <li>The system validates identity before accepting registrations or sensitive requests.</li> <li>Humans:</li> <li>Approvers and users must authenticate (e.g., SSO, OAuth, etc.).</li> <li>Roles and permissions determine which actions they can approve or execute.</li> </ul>"},{"location":"protocol/specification/security/#93-message-and-data-validation","title":"9.3. Message and Data Validation","text":"<ul> <li>All messages must be validated against their schema before being processed.</li> <li>Required fields and types must be rigorously checked.</li> <li>Agents must reject malformed or unexpected messages.</li> </ul>"},{"location":"protocol/specification/security/#94-auditing-and-traceability","title":"9.4. Auditing and Traceability","text":"<ul> <li>All critical actions (approvals, changes, executions) must be logged via <code>audit/log</code>.</li> <li>Logs must include: actor, action, timestamp, details, and result.</li> <li>It is recommended to store audit logs in immutable or protected systems.</li> </ul>"},{"location":"protocol/specification/security/#95-best-practices-for-protection-and-prevention","title":"9.5. Best Practices for Protection and Prevention","text":"<ul> <li>Never expose secrets (agentSecret, tokens) in logs or messages.</li> <li>Use encrypted channels (TLS/SSL) for all communications.</li> <li>Rotate credentials and tokens periodically.</li> <li>Limit the scope of tokens and permissions.</li> <li>Implement rate limiting and anomaly detection mechanisms.</li> <li>Validate inputs to prevent injection, XSS, and other common attacks.</li> </ul>"},{"location":"protocol/specification/security/#96-example-of-a-secure-flow","title":"9.6. Example of a Secure Flow","text":"<pre><code>sequenceDiagram\n    participant Agent\n    participant Protocol\n    participant Human\n    Agent-&gt;&gt;Protocol: agent/register (with agentSecret)\n    Protocol--&gt;&gt;Agent: response (validated registration)\n    Agent-&gt;&gt;Protocol: agent/request (sensitive task)\n    Protocol-&gt;&gt;Human: governance/approval (requires authentication)\n    Human--&gt;&gt;Protocol: governance/approval (decision, authenticated)\n    Protocol-&gt;&gt;Agent: response (result)\n    Protocol-&gt;&gt;Audit: audit/log (all actions)</code></pre> <p>Note: Security is a shared responsibility between agents, humans, and the system. It is recommended to review and update security policies periodically.</p>"},{"location":"protocol/specification/types/","title":"2. Base Types and Structures - HugAI v2 Specification","text":"<p>This section defines the fundamental types and structures of the HugAI v2 protocol. All protocol messages and flows are based on these types.</p>"},{"location":"protocol/specification/types/#21-base-json-rpc-message","title":"2.1. Base JSON-RPC Message","text":"Field Type Required Description jsonrpc string (\"2.0\") Yes JSON-RPC protocol version method string Yes Name of the method/procedure params object (optional) No Method-specific parameters id string / number Optional Unique identifier for the request/response"},{"location":"protocol/specification/types/#22-agent","title":"2.2. Agent","text":"Field Type Required Description agentId string Yes Unique identifier of the agent type string (enum) Yes Agent type (analysis, implementation, etc.) capabilities string[] Yes List of supported capabilities/tasks governanceLevel string (enum) Yes Governance level: autonomous, supervised, manual version string No Agent version author string No Author or responsible team description string No Brief description of the agent dependencies string[] No Other required agents"},{"location":"protocol/specification/types/#23-agent-capability","title":"2.3. Agent Capability","text":"Field Type Required Description name string Yes Name of the capability/task inputs string[] No Required input types outputs string[] No Generated output types params object No Specific configuration parameters"},{"location":"protocol/specification/types/#24-workflow-object","title":"2.4. Workflow Object","text":"Field Type Required Description id string Yes Unique identifier of the workflow projectId string Yes Associated project currentPhase string (enum) Yes Current phase (planning, design, etc.) status string (enum) Yes General status (in_progress, completed, etc.) phases object[] Yes List of phases and their information governanceRules object[] Yes Applied governance rules requirements object Yes Workflow requirements createdAt string (ISO date) Yes Creation date updatedAt string (ISO date) Yes Last update date"},{"location":"protocol/specification/types/#25-approvalgovernance-object","title":"2.5. Approval/Governance Object","text":"Field Type Required Description checkpoint string Yes Name of the control point artifact object Yes Artifact or evidence to approve/review approver string Yes Identifier of the human approver decision string Yes approved, rejected, needs_revision feedback string No Comments or justification"},{"location":"protocol/specification/types/#additional-types-and-enums","title":"Additional Types and Enums","text":""},{"location":"protocol/specification/types/#agent-status-agentstatus","title":"Agent Status (<code>AgentStatus</code>)","text":"Value Description idle The agent is available and on standby busy The agent is processing a task error The agent has encountered an error offline The agent is not available"},{"location":"protocol/specification/types/#governance-checkpoint-status-checkpointstatus","title":"Governance Checkpoint Status (<code>CheckpointStatus</code>)","text":"Value Description pending Pending review/approval approved Approved rejected Rejected escalated Escalated to a higher level"},{"location":"protocol/specification/types/#workflow-phase-status-workflowphasestatus","title":"Workflow Phase Status (<code>WorkflowPhaseStatus</code>)","text":"Value Description not_started The phase has not started yet in_progress The phase is in progress completed The phase has been successfully completed failed The phase has failed or was not completed <p>Note: These enums allow modeling the state and transition of agents, checkpoints, and phases in HugAI workflows, facilitating traceability and dynamic process management.</p> <p>Note: Types and structures may be extended as the protocol evolves. Each field must be documented and validated in implementations.</p>"}]}