{"config":{"lang":["es"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HugAI Dev - Desarrollo de IA Gobernada por Humanos","text":"<p>\"No automatizamos a los desarrolladores, los multiplicamos.\"</p> <p>Bienvenido a HugAI.dev, la metodolog\u00eda integral para implementar IA gobernada por humanos en el desarrollo de software. Nuestro enfoque garantiza que la IA potencie las capacidades humanas en lugar de reemplazarlas, creando una simbiosis poderosa entre la creatividad humana y la eficiencia de la IA.</p> <p>Filosof\u00eda de HugAI</p> <p>El Desarrollo de Software con IA Gobernada por Humanos representa un cambio de paradigma donde la IA amplifica la experiencia humana en lugar de reemplazarla. Creemos que los mejores resultados en software surgen de combinar la creatividad, el juicio y el conocimiento del dominio humano con la eficiencia y consistencia de la IA.</p> <p>```</p>"},{"location":"glosario/","title":"Glosario y FAQ - HugAI v2","text":""},{"location":"glosario/#glosario-de-terminos","title":"Glosario de T\u00e9rminos","text":"<ul> <li>Agente de IA: Entidad aut\u00f3noma o semiaut\u00f3noma que ejecuta tareas especializadas dentro del ciclo de vida del desarrollo.</li> <li>Gobernanza: Conjunto de reglas, procesos y checkpoints que aseguran el control humano sobre las acciones de los agentes.</li> <li>Checkpoint: Punto de control donde se requiere intervenci\u00f3n, revisi\u00f3n o aprobaci\u00f3n humana.</li> <li>Capacidades del agente: Funcionalidades, tareas o servicios que un agente puede ofrecer y negociar.</li> <li>Orquestaci\u00f3n multi-agente: Coordinaci\u00f3n de varios agentes para colaborar en flujos de trabajo complejos.</li> <li>JSON-RPC 2.0: Protocolo est\u00e1ndar de mensajer\u00eda usado como base para la comunicaci\u00f3n en HugAI.</li> <li>Inicializaci\u00f3n: Proceso de conexi\u00f3n y negociaci\u00f3n de capacidades entre agentes, herramientas y el sistema.</li> <li>Aprobaci\u00f3n humana: Decisi\u00f3n tomada por una persona en un checkpoint cr\u00edtico del flujo de trabajo.</li> <li>Extensibilidad: Capacidad del protocolo para incorporar nuevas funciones, mensajes o agentes sin romper la compatibilidad.</li> <li>Trazabilidad: Registro auditable de todas las acciones, decisiones y eventos relevantes en el sistema.</li> </ul>"},{"location":"glosario/#preguntas-frecuentes-faq","title":"Preguntas Frecuentes (FAQ)","text":"<p>\u00bfQu\u00e9 es HugAI v2?</p> <p>Es la segunda versi\u00f3n del proyecto HugAI, que busca estandarizar la colaboraci\u00f3n entre agentes de IA y humanos en el desarrollo de software, con gobernanza y control humano en el centro.</p> <p>\u00bfC\u00f3mo se diferencia HugAI de otros frameworks de IA?</p> <p>HugAI prioriza la gobernanza humana, la interoperabilidad y la trazabilidad, permitiendo integrar agentes de distintos proveedores bajo reglas y flujos auditables.</p> <p>\u00bfPuedo crear mis propios agentes?</p> <p>S\u00ed, puedes implementar agentes personalizados siempre que sigan el protocolo definido y se registren correctamente en el sistema.</p> <p>\u00bfQu\u00e9 lenguajes y tecnolog\u00edas soporta HugAI?</p> <p>El protocolo es agn\u00f3stico, pero la referencia y los ejemplos actuales est\u00e1n en TypeScript/Node.js. Se puede adaptar a otros lenguajes.</p> <p>\u00bfC\u00f3mo se asegura la seguridad y la \u00e9tica?</p> <p>Mediante autenticaci\u00f3n, autorizaci\u00f3n, trazabilidad, validaci\u00f3n cruzada y puntos de control humano obligatorios en tareas cr\u00edticas.</p> <p>\u00bfD\u00f3nde reporto bugs o propongo mejoras?</p> <p>Puedes abrir un issue en el repositorio principal o contactar al equipo de HugAI.</p> <p>\u00bfTienes m\u00e1s preguntas? \u00a1Agrega tu duda aqu\u00ed o consulta la documentaci\u00f3n completa! </p>"},{"location":"metodologia/","title":"Metodolog\u00eda HugAI v2","text":""},{"location":"metodologia/#introduccion","title":"Introducci\u00f3n","text":"<p>La metodolog\u00eda HugAI es un marco integral para el desarrollo de software asistido por inteligencia artificial, dise\u00f1ado para maximizar la productividad y la calidad sin perder el control humano en los puntos cr\u00edticos del ciclo de vida. HugAI integra agentes de IA especializados en cada fase del desarrollo, pero siempre bajo una filosof\u00eda de \"gobernanza humana\": las decisiones clave, la supervisi\u00f3n y la validaci\u00f3n final permanecen en manos de las personas.</p> <p>Esta metodolog\u00eda surge ante la necesidad de combinar lo mejor de la automatizaci\u00f3n inteligente con la experiencia, el criterio y la responsabilidad humana. Su objetivo es acelerar la entrega de valor, mejorar la consistencia y seguridad del software, y facilitar la colaboraci\u00f3n entre equipos humanos y agentes de IA, todo dentro de un marco transparente, auditable y adaptable a distintos contextos organizacionales.</p> <p>HugAI se inspira en pr\u00e1cticas \u00e1giles, DevOps y en los avances recientes en IA generativa, pero a\u00f1ade una capa de gobernanza y orquestaci\u00f3n multi-agente que permite escalar la adopci\u00f3n de IA en desarrollo de software de manera responsable y sostenible.</p>"},{"location":"metodologia/#objetivos","title":"Objetivos","text":"<p>Los objetivos principales de la metodolog\u00eda HugAI son:</p> <ol> <li>Acelerar la entrega de software de calidad</li> <li> <p>Automatizar tareas repetitivas y complejas mediante agentes de IA, permitiendo a los equipos humanos enfocarse en la creatividad, el dise\u00f1o y la toma de decisiones estrat\u00e9gicas.</p> </li> <li> <p>Mantener la gobernanza y el control humano</p> </li> <li> <p>Garantizar que las decisiones cr\u00edticas, revisiones y aprobaciones permanezcan bajo supervisi\u00f3n humana, asegurando responsabilidad y cumplimiento normativo.</p> </li> <li> <p>Fomentar la colaboraci\u00f3n humano-IA</p> </li> <li> <p>Integrar agentes de IA como asistentes especializados que colaboran con los equipos humanos, potenciando la productividad y la innovaci\u00f3n.</p> </li> <li> <p>Mejorar la consistencia, seguridad y trazabilidad</p> </li> <li> <p>Estandarizar procesos, aplicar mejores pr\u00e1cticas y mantener registros auditables de todas las acciones y decisiones tomadas por agentes y humanos.</p> </li> <li> <p>Facilitar la adopci\u00f3n escalable y sostenible de IA</p> </li> <li>Proveer un marco adaptable a distintos tama\u00f1os de equipo, dominios y niveles de madurez tecnol\u00f3gica, permitiendo una integraci\u00f3n progresiva y controlada de la IA en el ciclo de vida del software.</li> </ol>"},{"location":"metodologia/#principios-fundamentales","title":"Principios Fundamentales","text":"<p>Los principios rectores de la metodolog\u00eda HugAI son:</p> <ol> <li>Transparencia</li> <li>Todas las acciones, decisiones y recomendaciones de los agentes de IA deben ser trazables, auditables y comprensibles para los humanos involucrados.</li> <li>Control Humano</li> <li>El ser humano mantiene la autoridad final sobre las decisiones cr\u00edticas, pudiendo aceptar, rechazar o solicitar revisiones a las propuestas de la IA.</li> <li>Colaboraci\u00f3n</li> <li>Se promueve la sinergia entre equipos humanos y agentes de IA, aprovechando las fortalezas de ambos para lograr mejores resultados.</li> <li>Responsabilidad</li> <li>Cada acci\u00f3n tomada por agentes o humanos debe estar claramente atribuida, permitiendo la rendici\u00f3n de cuentas y el cumplimiento normativo.</li> <li>Adaptabilidad</li> <li>La metodolog\u00eda debe poder ajustarse a distintos contextos, dominios y niveles de madurez tecnol\u00f3gica, facilitando la adopci\u00f3n progresiva.</li> <li>Mejora Continua</li> <li>Se fomenta la retroalimentaci\u00f3n y el aprendizaje tanto de los agentes como de los equipos humanos, para evolucionar procesos y resultados de manera iterativa.</li> <li>Seguridad y \u00c9tica</li> <li>La integraci\u00f3n de IA debe realizarse respetando principios \u00e9ticos y de seguridad, minimizando riesgos y previniendo sesgos o usos indebidos.</li> </ol>"},{"location":"metodologia/#fases-del-ciclo-de-vida","title":"Fases del Ciclo de Vida","text":"<p>La metodolog\u00eda HugAI estructura el ciclo de vida del desarrollo de software en las siguientes fases principales, cada una apoyada por agentes de IA especializados y puntos de control humano:</p> <ol> <li>Planificaci\u00f3n</li> <li>Definici\u00f3n de objetivos, alcance, requisitos y criterios de \u00e9xito del proyecto. Participan agentes de an\u00e1lisis, refinamiento de requerimientos y expertos de dominio, siempre validados por stakeholders humanos.</li> <li>Dise\u00f1o</li> <li>Arquitectura, dise\u00f1o de componentes, selecci\u00f3n de tecnolog\u00edas y definici\u00f3n de interfaces. Agentes de arquitectura y dise\u00f1o colaboran con humanos para proponer y validar soluciones.</li> <li>Implementaci\u00f3n</li> <li>Desarrollo del c\u00f3digo, integraci\u00f3n de m\u00f3dulos y generaci\u00f3n de artefactos. Agentes de generaci\u00f3n de c\u00f3digo, integraci\u00f3n y documentaci\u00f3n asisten a los desarrolladores, bajo revisi\u00f3n y aprobaci\u00f3n humana.</li> <li>Testing y Validaci\u00f3n</li> <li>Pruebas autom\u00e1ticas y manuales, an\u00e1lisis de calidad, seguridad y performance. Agentes de testing, seguridad y performance generan y ejecutan pruebas, reportando hallazgos para revisi\u00f3n humana.</li> <li>Despliegue</li> <li>Preparaci\u00f3n y ejecuci\u00f3n del despliegue en entornos de producci\u00f3n o staging. Agentes de DevOps y despliegue automatizan procesos, pero los hitos clave requieren aprobaci\u00f3n humana.</li> <li>Mantenimiento y Evoluci\u00f3n</li> <li>Monitoreo, soporte, correcci\u00f3n de errores y evoluci\u00f3n del sistema. Agentes de mantenimiento y observabilidad detectan incidencias y proponen mejoras, que son priorizadas y validadas por el equipo humano.</li> </ol> <p>Cada fase incluye checkpoints de gobernanza donde se requiere intervenci\u00f3n, revisi\u00f3n o aprobaci\u00f3n humana, asegurando as\u00ed la calidad, seguridad y alineaci\u00f3n con los objetivos del proyecto.</p>"},{"location":"metodologia/#roles-y-responsabilidades","title":"Roles y Responsabilidades","text":"<p>En la metodolog\u00eda HugAI, los roles clave y sus responsabilidades principales son:</p> <ol> <li>Stakeholders Humanos</li> <li>Definen los objetivos, prioridades y criterios de \u00e9xito del proyecto.</li> <li>Validan y aprueban los entregables en los checkpoints de gobernanza.</li> <li> <p>Toman decisiones cr\u00edticas y resuelven conflictos o ambig\u00fcedades.</p> </li> <li> <p>Equipo de Desarrollo Humano</p> </li> <li>Colabora con los agentes de IA en la ejecuci\u00f3n de tareas t\u00e9cnicas y creativas.</li> <li>Supervisa, revisa y valida las propuestas y resultados generados por la IA.</li> <li> <p>Aporta experiencia, contexto y juicio en la toma de decisiones.</p> </li> <li> <p>Agentes de IA Especializados</p> </li> <li>Ejecutan tareas automatizadas de an\u00e1lisis, dise\u00f1o, implementaci\u00f3n, testing, documentaci\u00f3n, operaciones y gobernanza.</li> <li>Proponen soluciones, detectan incidencias y generan recomendaciones para el equipo humano.</li> <li> <p>Mantienen registros detallados de sus acciones y decisiones para auditor\u00eda y trazabilidad.</p> </li> <li> <p>L\u00edder de Gobernanza/Coordinador</p> </li> <li>Orquesta la colaboraci\u00f3n entre humanos y agentes de IA.</li> <li>Asegura el cumplimiento de los principios, procesos y checkpoints de la metodolog\u00eda.</li> <li>Facilita la mejora continua y la resoluci\u00f3n de problemas organizativos o t\u00e9cnicos.</li> </ol>"},{"location":"metodologia/#tipos-de-agentes","title":"Tipos de Agentes","text":"<p>La metodolog\u00eda HugAI define varios tipos de agentes de IA, cada uno especializado en una fase o funci\u00f3n del ciclo de vida del desarrollo:</p> <ol> <li>Agentes de An\u00e1lisis</li> <li>Refinan requerimientos, analizan necesidades y validan el contexto del proyecto (ej: Requirements Analyzer, Domain Expert, Prompt Refiner).</li> <li>Agentes de Dise\u00f1o</li> <li>Proponen arquitecturas, dise\u00f1an componentes y definen interfaces (ej: Architecture Agent, Router Agent).</li> <li>Agentes de Implementaci\u00f3n</li> <li>Generan c\u00f3digo, integran m\u00f3dulos y producen documentaci\u00f3n t\u00e9cnica (ej: Implementation Agent, Integration Agent, Documentation Writer).</li> <li>Agentes de Calidad</li> <li>Generan y ejecutan pruebas, analizan seguridad y performance, revisan c\u00f3digo (ej: Test Agent, Security Agent, Performance Agent, Internal Reviewer).</li> <li>Agentes de Operaciones</li> <li>Automatizan despliegues, monitorean sistemas y gestionan mantenimiento (ej: Deployment Agent, DevOps Agent, Maintenance Agent, Observability Agent).</li> <li>Agentes de Gobernanza</li> <li>Supervisan cumplimiento, gestionan riesgos y escalan incidencias (ej: Compliance Agent, Risk Management Agent, Escalation Manager).</li> </ol> <p>Cada agente opera bajo reglas de gobernanza y colabora con humanos y otros agentes para maximizar el valor y la seguridad en cada fase del ciclo de vida.</p>"},{"location":"metodologia/#flujos-de-trabajo","title":"Flujos de Trabajo","text":"<p>En HugAI, los flujos de trabajo se basan en la orquestaci\u00f3n din\u00e1mica entre agentes de IA y humanos, asegurando que cada tarea pase por los puntos de control y validaci\u00f3n adecuados:</p> <ol> <li>Inicio y Asignaci\u00f3n</li> <li>Un humano o agente inicia el workflow, define el objetivo y asigna tareas a los agentes especializados correspondientes.</li> <li>Ejecuci\u00f3n Colaborativa</li> <li>Los agentes ejecutan tareas automatizadas (an\u00e1lisis, generaci\u00f3n de c\u00f3digo, pruebas, etc.) y reportan resultados o recomendaciones.</li> <li>Los humanos revisan, validan o solicitan ajustes sobre los resultados generados por la IA.</li> <li>Checkpoints de Gobernanza</li> <li>En puntos clave del workflow, se requiere intervenci\u00f3n humana para aprobar, rechazar o solicitar revisiones antes de avanzar a la siguiente fase.</li> <li>Escalaci\u00f3n y Resoluci\u00f3n de Incidencias</li> <li>Si un agente detecta un problema fuera de su alcance, escala la incidencia a un humano o a un agente de gobernanza para su resoluci\u00f3n.</li> <li>Cierre y Retroalimentaci\u00f3n</li> <li>Al finalizar el workflow, se documentan los resultados, aprendizajes y oportunidades de mejora para retroalimentar el sistema y los agentes.</li> </ol> <p>Este modelo permite flexibilidad, adaptabilidad y control, asegurando que la automatizaci\u00f3n nunca reemplace la supervisi\u00f3n y el juicio humano, sino que los potencie.</p>"},{"location":"metodologia/#niveles-de-gobernanza","title":"Niveles de Gobernanza","text":"<p>La metodolog\u00eda HugAI define tres niveles de gobernanza para la interacci\u00f3n entre agentes de IA y humanos:</p> <ol> <li>Aut\u00f3nomo</li> <li>El agente de IA puede ejecutar tareas y tomar decisiones dentro de un rango predefinido sin requerir aprobaci\u00f3n humana previa. Se utiliza para tareas de bajo riesgo o alta repetitividad, pero siempre con trazabilidad y posibilidad de auditor\u00eda posterior.</li> <li>Supervisado</li> <li>El agente de IA puede proponer acciones o soluciones, pero requiere revisi\u00f3n y aprobaci\u00f3n humana antes de ejecutar cambios significativos. Es el modo recomendado para tareas de impacto medio o cuando se requiere control adicional.</li> <li>Manual</li> <li>El agente de IA solo puede sugerir acciones, pero la ejecuci\u00f3n final depende completamente de la intervenci\u00f3n humana. Se reserva para tareas cr\u00edticas, sensibles o que requieren juicio experto.</li> </ol> <p>La elecci\u00f3n del nivel de gobernanza depende del contexto, el riesgo asociado a la tarea y las pol\u00edticas de la organizaci\u00f3n. Los niveles pueden ajustarse din\u00e1micamente seg\u00fan la fase del proyecto o el historial de desempe\u00f1o de los agentes.</p>"},{"location":"metodologia/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<p>Para una adopci\u00f3n y uso efectivo de la metodolog\u00eda HugAI, se recomienda:</p> <ol> <li>Definir claramente los roles y responsabilidades desde el inicio del proyecto.</li> <li>Seleccionar el nivel de gobernanza adecuado para cada tarea seg\u00fan su criticidad y riesgo.</li> <li>Documentar todas las decisiones y acciones tomadas por agentes y humanos para asegurar trazabilidad y auditor\u00eda.</li> <li>Fomentar la capacitaci\u00f3n continua de los equipos humanos en el uso de IA y en la interpretaci\u00f3n de sus resultados.</li> <li>Revisar y actualizar peri\u00f3dicamente los flujos de trabajo y las reglas de gobernanza seg\u00fan la experiencia y los aprendizajes obtenidos.</li> <li>Promover la colaboraci\u00f3n y la comunicaci\u00f3n abierta entre todos los participantes, humanos y agentes.</li> <li>Evaluar y mitigar riesgos \u00e9ticos y de seguridad antes de automatizar tareas cr\u00edticas.</li> <li>Utilizar m\u00e9tricas y feedback para mejorar continuamente la integraci\u00f3n y el desempe\u00f1o de los agentes de IA.</li> </ol>"},{"location":"metodologia/#limitaciones","title":"Limitaciones","text":"<p>Aunque la metodolog\u00eda HugAI ofrece un marco robusto, es importante considerar sus limitaciones:</p> <ul> <li>Dependencia de la calidad de los modelos de IA: Los resultados y recomendaciones de los agentes dependen de la precisi\u00f3n y actualizaci\u00f3n de los modelos subyacentes.</li> <li>Requiere madurez organizacional: La adopci\u00f3n efectiva demanda equipos dispuestos a colaborar y adaptarse a nuevos procesos y tecnolog\u00edas.</li> <li>No reemplaza el juicio experto: La IA es un complemento, no un sustituto del conocimiento y la experiencia humana, especialmente en contextos cr\u00edticos o ambiguos.</li> <li>Posibles sesgos y errores: Los agentes pueden heredar sesgos de los datos o cometer errores; por eso la supervisi\u00f3n humana es indispensable.</li> <li>Costos de implementaci\u00f3n y mantenimiento: Integrar y mantener agentes de IA puede requerir inversi\u00f3n en infraestructura, capacitaci\u00f3n y actualizaci\u00f3n continua.</li> <li>Cumplimiento normativo y \u00e9tico: Es necesario adaptar la metodolog\u00eda a los requisitos legales y \u00e9ticos de cada industria o regi\u00f3n.</li> </ul> <p>NOTA: Este documento es el punto de partida para la versi\u00f3n 2 de la metodolog\u00eda HugAI. Cada secci\u00f3n ser\u00e1 completada y mejorada iterativamente. </p>"},{"location":"metodologia/fases/","title":"Fases del Ciclo de Vida","text":"<p>La metodolog\u00eda HugAI estructura el ciclo de vida del desarrollo de software en las siguientes fases principales, cada una apoyada por agentes de IA especializados y puntos de control humano:</p> <ol> <li>Planificaci\u00f3n</li> <li>Definici\u00f3n de objetivos, alcance, requisitos y criterios de \u00e9xito del proyecto. Participan agentes de an\u00e1lisis, refinamiento de requerimientos y expertos de dominio, siempre validados por stakeholders humanos.</li> <li>Dise\u00f1o</li> <li>Arquitectura, dise\u00f1o de componentes, selecci\u00f3n de tecnolog\u00edas y definici\u00f3n de interfaces. Agentes de arquitectura y dise\u00f1o colaboran con humanos para proponer y validar soluciones.</li> <li>Implementaci\u00f3n</li> <li>Desarrollo del c\u00f3digo, integraci\u00f3n de m\u00f3dulos y generaci\u00f3n de artefactos. Agentes de generaci\u00f3n de c\u00f3digo, integraci\u00f3n y documentaci\u00f3n asisten a los desarrolladores, bajo revisi\u00f3n y aprobaci\u00f3n humana.</li> <li>Testing y Validaci\u00f3n</li> <li>Pruebas autom\u00e1ticas y manuales, an\u00e1lisis de calidad, seguridad y performance. Agentes de testing, seguridad y performance generan y ejecutan pruebas, reportando hallazgos para revisi\u00f3n humana.</li> <li>Despliegue</li> <li>Preparaci\u00f3n y ejecuci\u00f3n del despliegue en entornos de producci\u00f3n o staging. Agentes de DevOps y despliegue automatizan procesos, pero los hitos clave requieren aprobaci\u00f3n humana.</li> <li>Mantenimiento y Evoluci\u00f3n</li> <li>Monitoreo, soporte, correcci\u00f3n de errores y evoluci\u00f3n del sistema. Agentes de mantenimiento y observabilidad detectan incidencias y proponen mejoras, que son priorizadas y validadas por el equipo humano.</li> </ol> <p>Cada fase incluye checkpoints de gobernanza donde se requiere intervenci\u00f3n, revisi\u00f3n o aprobaci\u00f3n humana, asegurando as\u00ed la calidad, seguridad y alineaci\u00f3n con los objetivos del proyecto. </p>"},{"location":"metodologia/flujos/","title":"Flujos de Trabajo","text":"<p>En HugAI, los flujos de trabajo se basan en la orquestaci\u00f3n din\u00e1mica entre agentes de IA y humanos, asegurando que cada tarea pase por los puntos de control y validaci\u00f3n adecuados:</p> <ol> <li>Inicio y Asignaci\u00f3n</li> <li>Un humano o agente inicia el workflow, define el objetivo y asigna tareas a los agentes especializados correspondientes.</li> <li>Ejecuci\u00f3n Colaborativa</li> <li>Los agentes ejecutan tareas automatizadas (an\u00e1lisis, generaci\u00f3n de c\u00f3digo, pruebas, etc.) y reportan resultados o recomendaciones.</li> <li>Los humanos revisan, validan o solicitan ajustes sobre los resultados generados por la IA.</li> <li>Checkpoints de Gobernanza</li> <li>En puntos clave del workflow, se requiere intervenci\u00f3n humana para aprobar, rechazar o solicitar revisiones antes de avanzar a la siguiente fase.</li> <li>Escalaci\u00f3n y Resoluci\u00f3n de Incidencias</li> <li>Si un agente detecta un problema fuera de su alcance, escala la incidencia a un humano o a un agente de gobernanza para su resoluci\u00f3n.</li> <li>Cierre y Retroalimentaci\u00f3n</li> <li>Al finalizar el workflow, se documentan los resultados, aprendizajes y oportunidades de mejora para retroalimentar el sistema y los agentes.</li> </ol> <p>Este modelo permite flexibilidad, adaptabilidad y control, asegurando que la automatizaci\u00f3n nunca reemplace la supervisi\u00f3n y el juicio humano, sino que los potencie. </p>"},{"location":"metodologia/gobernanza/","title":"Niveles de Gobernanza","text":"<p>La metodolog\u00eda HugAI define tres niveles de gobernanza para la interacci\u00f3n entre agentes de IA y humanos:</p> <ol> <li>Aut\u00f3nomo</li> <li>El agente de IA puede ejecutar tareas y tomar decisiones dentro de un rango predefinido sin requerir aprobaci\u00f3n humana previa. Se utiliza para tareas de bajo riesgo o alta repetitividad, pero siempre con trazabilidad y posibilidad de auditor\u00eda posterior.</li> <li>Supervisado</li> <li>El agente de IA puede proponer acciones o soluciones, pero requiere revisi\u00f3n y aprobaci\u00f3n humana antes de ejecutar cambios significativos. Es el modo recomendado para tareas de impacto medio o cuando se requiere control adicional.</li> <li>Manual</li> <li>El agente de IA solo puede sugerir acciones, pero la ejecuci\u00f3n final depende completamente de la intervenci\u00f3n humana. Se reserva para tareas cr\u00edticas, sensibles o que requieren juicio experto.</li> </ol> <p>La elecci\u00f3n del nivel de gobernanza depende del contexto, el riesgo asociado a la tarea y las pol\u00edticas de la organizaci\u00f3n. Los niveles pueden ajustarse din\u00e1micamente seg\u00fan la fase del proyecto o el historial de desempe\u00f1o de los agentes. </p>"},{"location":"metodologia/introduccion/","title":"Introducci\u00f3n","text":"<p>La metodolog\u00eda HugAI es un marco integral para el desarrollo de software asistido por inteligencia artificial, dise\u00f1ado para maximizar la productividad y la calidad sin perder el control humano en los puntos cr\u00edticos del ciclo de vida. HugAI integra agentes de IA especializados en cada fase del desarrollo, pero siempre bajo una filosof\u00eda de \"gobernanza humana\": las decisiones clave, la supervisi\u00f3n y la validaci\u00f3n final permanecen en manos de las personas.</p> <p>Esta metodolog\u00eda surge ante la necesidad de combinar lo mejor de la automatizaci\u00f3n inteligente con la experiencia, el criterio y la responsabilidad humana. Su objetivo es acelerar la entrega de valor, mejorar la consistencia y seguridad del software, y facilitar la colaboraci\u00f3n entre equipos humanos y agentes de IA, todo dentro de un marco transparente, auditable y adaptable a distintos contextos organizacionales.</p> <p>HugAI se inspira en pr\u00e1cticas \u00e1giles, DevOps y en los avances recientes en IA generativa, pero a\u00f1ade una capa de gobernanza y orquestaci\u00f3n multi-agente que permite escalar la adopci\u00f3n de IA en desarrollo de software de manera responsable y sostenible. </p>"},{"location":"metodologia/limitaciones/","title":"Limitaciones","text":"<p>Aunque la metodolog\u00eda HugAI ofrece un marco robusto, es importante considerar sus limitaciones:</p> <ul> <li>Dependencia de la calidad de los modelos de IA: Los resultados y recomendaciones de los agentes dependen de la precisi\u00f3n y actualizaci\u00f3n de los modelos subyacentes.</li> <li>Requiere madurez organizacional: La adopci\u00f3n efectiva demanda equipos dispuestos a colaborar y adaptarse a nuevos procesos y tecnolog\u00edas.</li> <li>No reemplaza el juicio experto: La IA es un complemento, no un sustituto del conocimiento y la experiencia humana, especialmente en contextos cr\u00edticos o ambiguos.</li> <li>Posibles sesgos y errores: Los agentes pueden heredar sesgos de los datos o cometer errores; por eso la supervisi\u00f3n humana es indispensable.</li> <li>Costos de implementaci\u00f3n y mantenimiento: Integrar y mantener agentes de IA puede requerir inversi\u00f3n en infraestructura, capacitaci\u00f3n y actualizaci\u00f3n continua.</li> <li>Cumplimiento normativo y \u00e9tico: Es necesario adaptar la metodolog\u00eda a los requisitos legales y \u00e9ticos de cada industria o regi\u00f3n. </li> </ul>"},{"location":"metodologia/mejores-practicas/","title":"Mejores Pr\u00e1cticas","text":"<p>Para una adopci\u00f3n y uso efectivo de la metodolog\u00eda HugAI, se recomienda:</p> <ol> <li>Definir claramente los roles y responsabilidades desde el inicio del proyecto.</li> <li>Seleccionar el nivel de gobernanza adecuado para cada tarea seg\u00fan su criticidad y riesgo.</li> <li>Documentar todas las decisiones y acciones tomadas por agentes y humanos para asegurar trazabilidad y auditor\u00eda.</li> <li>Fomentar la capacitaci\u00f3n continua de los equipos humanos en el uso de IA y en la interpretaci\u00f3n de sus resultados.</li> <li>Revisar y actualizar peri\u00f3dicamente los flujos de trabajo y las reglas de gobernanza seg\u00fan la experiencia y los aprendizajes obtenidos.</li> <li>Promover la colaboraci\u00f3n y la comunicaci\u00f3n abierta entre todos los participantes, humanos y agentes.</li> <li>Evaluar y mitigar riesgos \u00e9ticos y de seguridad antes de automatizar tareas cr\u00edticas.</li> <li>Utilizar m\u00e9tricas y feedback para mejorar continuamente la integraci\u00f3n y el desempe\u00f1o de los agentes de IA. </li> </ol>"},{"location":"metodologia/nota/","title":"Nota","text":"<p>NOTA: Este documento es el punto de partida para la versi\u00f3n 2 de la metodolog\u00eda HugAI. Cada secci\u00f3n ser\u00e1 completada y mejorada iterativamente. </p>"},{"location":"metodologia/objetivos/","title":"Objetivos","text":"<p>Los objetivos principales de la metodolog\u00eda HugAI son:</p> <ol> <li>Acelerar la entrega de software de calidad</li> <li> <p>Automatizar tareas repetitivas y complejas mediante agentes de IA, permitiendo a los equipos humanos enfocarse en la creatividad, el dise\u00f1o y la toma de decisiones estrat\u00e9gicas.</p> </li> <li> <p>Mantener la gobernanza y el control humano</p> </li> <li> <p>Garantizar que las decisiones cr\u00edticas, revisiones y aprobaciones permanezcan bajo supervisi\u00f3n humana, asegurando responsabilidad y cumplimiento normativo.</p> </li> <li> <p>Fomentar la colaboraci\u00f3n humano-IA</p> </li> <li> <p>Integrar agentes de IA como asistentes especializados que colaboran con los equipos humanos, potenciando la productividad y la innovaci\u00f3n.</p> </li> <li> <p>Mejorar la consistencia, seguridad y trazabilidad</p> </li> <li> <p>Estandarizar procesos, aplicar mejores pr\u00e1cticas y mantener registros auditables de todas las acciones y decisiones tomadas por agentes y humanos.</p> </li> <li> <p>Facilitar la adopci\u00f3n escalable y sostenible de IA</p> </li> <li>Proveer un marco adaptable a distintos tama\u00f1os de equipo, dominios y niveles de madurez tecnol\u00f3gica, permitiendo una integraci\u00f3n progresiva y controlada de la IA en el ciclo de vida del software. </li> </ol>"},{"location":"metodologia/principios/","title":"Principios Fundamentales","text":"<p>Los principios rectores de la metodolog\u00eda HugAI son:</p> <ol> <li>Transparencia</li> <li>Todas las acciones, decisiones y recomendaciones de los agentes de IA deben ser trazables, auditables y comprensibles para los humanos involucrados.</li> <li>Control Humano</li> <li>El ser humano mantiene la autoridad final sobre las decisiones cr\u00edticas, pudiendo aceptar, rechazar o solicitar revisiones a las propuestas de la IA.</li> <li>Colaboraci\u00f3n</li> <li>Se promueve la sinergia entre equipos humanos y agentes de IA, aprovechando las fortalezas de ambos para lograr mejores resultados.</li> <li>Responsabilidad</li> <li>Cada acci\u00f3n tomada por agentes o humanos debe estar claramente atribuida, permitiendo la rendici\u00f3n de cuentas y el cumplimiento normativo.</li> <li>Adaptabilidad</li> <li>La metodolog\u00eda debe poder ajustarse a distintos contextos, dominios y niveles de madurez tecnol\u00f3gica, facilitando la adopci\u00f3n progresiva.</li> <li>Mejora Continua</li> <li>Se fomenta la retroalimentaci\u00f3n y el aprendizaje tanto de los agentes como de los equipos humanos, para evolucionar procesos y resultados de manera iterativa.</li> <li>Seguridad y \u00c9tica</li> <li>La integraci\u00f3n de IA debe realizarse respetando principios \u00e9ticos y de seguridad, minimizando riesgos y previniendo sesgos o usos indebidos. </li> </ol>"},{"location":"metodologia/roles/","title":"Roles y Responsabilidades","text":"<p>En la metodolog\u00eda HugAI, los roles clave y sus responsabilidades principales son:</p> <ol> <li>Stakeholders Humanos</li> <li>Definen los objetivos, prioridades y criterios de \u00e9xito del proyecto.</li> <li>Validan y aprueban los entregables en los checkpoints de gobernanza.</li> <li> <p>Toman decisiones cr\u00edticas y resuelven conflictos o ambig\u00fcedades.</p> </li> <li> <p>Equipo de Desarrollo Humano</p> </li> <li>Colabora con los agentes de IA en la ejecuci\u00f3n de tareas t\u00e9cnicas y creativas.</li> <li>Supervisa, revisa y valida las propuestas y resultados generados por la IA.</li> <li> <p>Aporta experiencia, contexto y juicio en la toma de decisiones.</p> </li> <li> <p>Agentes de IA Especializados</p> </li> <li>Ejecutan tareas automatizadas de an\u00e1lisis, dise\u00f1o, implementaci\u00f3n, testing, documentaci\u00f3n, operaciones y gobernanza.</li> <li>Proponen soluciones, detectan incidencias y generan recomendaciones para el equipo humano.</li> <li> <p>Mantienen registros detallados de sus acciones y decisiones para auditor\u00eda y trazabilidad.</p> </li> <li> <p>L\u00edder de Gobernanza/Coordinador</p> </li> <li>Orquesta la colaboraci\u00f3n entre humanos y agentes de IA.</li> <li>Asegura el cumplimiento de los principios, procesos y checkpoints de la metodolog\u00eda.</li> <li>Facilita la mejora continua y la resoluci\u00f3n de problemas organizativos o t\u00e9cnicos. </li> </ol>"},{"location":"metodologia/tipos-agentes/","title":"Tipos de Agentes","text":"<p>La metodolog\u00eda HugAI define varios tipos de agentes de IA, cada uno especializado en una fase o funci\u00f3n del ciclo de vida del desarrollo:</p> <ol> <li>Agentes de An\u00e1lisis</li> <li>Refinan requerimientos, analizan necesidades y validan el contexto del proyecto (ej: Requirements Analyzer, Domain Expert, Prompt Refiner).</li> <li>Agentes de Dise\u00f1o</li> <li>Proponen arquitecturas, dise\u00f1an componentes y definen interfaces (ej: Architecture Agent, Router Agent).</li> <li>Agentes de Implementaci\u00f3n</li> <li>Generan c\u00f3digo, integran m\u00f3dulos y producen documentaci\u00f3n t\u00e9cnica (ej: Implementation Agent, Integration Agent, Documentation Writer).</li> <li>Agentes de Calidad</li> <li>Generan y ejecutan pruebas, analizan seguridad y performance, revisan c\u00f3digo (ej: Test Agent, Security Agent, Performance Agent, Internal Reviewer).</li> <li>Agentes de Operaciones</li> <li>Automatizan despliegues, monitorean sistemas y gestionan mantenimiento (ej: Deployment Agent, DevOps Agent, Maintenance Agent, Observability Agent).</li> <li>Agentes de Gobernanza</li> <li>Supervisan cumplimiento, gestionan riesgos y escalan incidencias (ej: Compliance Agent, Risk Management Agent, Escalation Manager).</li> </ol> <p>Cada agente opera bajo reglas de gobernanza y colabora con humanos y otros agentes para maximizar el valor y la seguridad en cada fase del ciclo de vida. </p>"},{"location":"protocolo/","title":"Protocolo HugAI v2","text":""},{"location":"protocolo/#introduccion","title":"Introducci\u00f3n","text":"<p>El Protocolo HugAI es una especificaci\u00f3n abierta dise\u00f1ada para habilitar la interoperabilidad, orquestaci\u00f3n y gobernanza de agentes de inteligencia artificial en el desarrollo de software. Inspirado en el Language Server Protocol (LSP), HugAI busca estandarizar la comunicaci\u00f3n entre herramientas, agentes y humanos, permitiendo que m\u00faltiples sistemas de IA colaboren de manera segura, auditable y bajo control humano.</p> <p>El protocolo define c\u00f3mo los agentes de IA se registran, negocian capacidades, intercambian mensajes y se integran en flujos de trabajo gobernados por humanos. Su objetivo es facilitar la adopci\u00f3n escalable de IA en entornos de desarrollo, reducir el vendor lock-in y crear un ecosistema abierto donde agentes, herramientas y humanos puedan colaborar de forma transparente y eficiente.</p> <p>HugAI est\u00e1 pensado para ser extensible, adaptable a distintos dominios y compatible con m\u00faltiples tecnolog\u00edas de transporte (HTTP, WebSocket, STDIO), siguiendo principios de modularidad, seguridad y trazabilidad.</p>"},{"location":"protocolo/#objetivos-del-protocolo","title":"Objetivos del Protocolo","text":"<p>Los objetivos principales de la especificaci\u00f3n t\u00e9cnica del protocolo HugAI son:</p> <ol> <li>Estandarizar la comunicaci\u00f3n entre agentes de IA, herramientas y humanos</li> <li>Definir un lenguaje com\u00fan y formatos de mensaje interoperables para facilitar la integraci\u00f3n de m\u00faltiples sistemas y proveedores.</li> <li>Facilitar la orquestaci\u00f3n y colaboraci\u00f3n multi-agente</li> <li>Permitir que agentes especializados trabajen juntos, compartan contexto y coordinen tareas bajo flujos de trabajo gobernados por humanos.</li> <li>Garantizar la gobernanza y el control humano</li> <li>Incluir mecanismos de aprobaci\u00f3n, auditor\u00eda y trazabilidad para asegurar que las decisiones cr\u00edticas sean supervisadas y validadas por personas.</li> <li>Promover la extensibilidad y adaptabilidad</li> <li>Dise\u00f1ar el protocolo para que pueda evolucionar, incorporar nuevas capacidades y adaptarse a distintos dominios y tecnolog\u00edas.</li> <li>Asegurar la seguridad y la integridad de las interacciones</li> <li>Proveer autenticaci\u00f3n, autorizaci\u00f3n y protecci\u00f3n contra acciones maliciosas o accidentales.</li> <li>Reducir el vendor lock-in y fomentar un ecosistema abierto</li> <li>Permitir la interoperabilidad entre agentes y herramientas de distintos proveedores, facilitando la adopci\u00f3n y la innovaci\u00f3n colaborativa.</li> </ol>"},{"location":"protocolo/#arquitectura-general","title":"Arquitectura General","text":"<p>El protocolo HugAI se basa en una arquitectura modular y en capas, inspirada en el Language Server Protocol (LSP) y en el est\u00e1ndar JSON-RPC 2.0. Esta arquitectura permite separar responsabilidades, facilitar la extensibilidad y asegurar la interoperabilidad entre distintos agentes, herramientas y plataformas.</p>"},{"location":"protocolo/#componentes-principales","title":"Componentes principales:","text":"<ul> <li>Agentes de IA: Entidades especializadas que ejecutan tareas, procesan mensajes y colaboran en flujos de trabajo.</li> <li>Coordinador/Gateway: Nodo central (opcional) que orquesta la comunicaci\u00f3n, enruta mensajes y aplica reglas de gobernanza.</li> <li>Clientes/Herramientas: Interfaces de usuario, IDEs, sistemas de CI/CD u otras aplicaciones que interact\u00faan con los agentes a trav\u00e9s del protocolo.</li> <li>Stakeholders Humanos: Personas que supervisan, validan y toman decisiones en los puntos de control definidos.</li> </ul>"},{"location":"protocolo/#capas-de-la-arquitectura","title":"Capas de la arquitectura:","text":"<ol> <li>Capa de Transporte: Define los mecanismos de comunicaci\u00f3n f\u00edsica (HTTP, WebSocket, STDIO, etc.).</li> <li>Capa de Mensajer\u00eda (JSON-RPC 2.0): Estandariza el formato de los mensajes, solicitudes, respuestas y notificaciones.</li> <li>Capa de Comunicaci\u00f3n de Agentes: Gestiona el registro, descubrimiento y negociaci\u00f3n de capacidades entre agentes.</li> <li>Capa de Gobernanza y Aprobaciones: Implementa los flujos de control humano, auditor\u00eda y checkpoints de validaci\u00f3n.</li> <li>Capa de Integraci\u00f3n de Herramientas: Permite la conexi\u00f3n con sistemas externos (IDEs, CI/CD, monitoreo, etc.).</li> <li>Capa de Orquestaci\u00f3n Multi-Agente: Coordina la colaboraci\u00f3n y el flujo de tareas entre m\u00faltiples agentes y humanos.</li> </ol> <p>Esta arquitectura permite que el protocolo evolucione, incorpore nuevas funcionalidades y se adapte a distintos escenarios de uso, manteniendo siempre la trazabilidad, seguridad y control humano como principios fundamentales.</p>"},{"location":"protocolo/#capas-del-protocolo","title":"Capas del Protocolo","text":"<p>A continuaci\u00f3n se describen las capas principales del protocolo HugAI:</p> <ol> <li>Capa de Transporte</li> <li>Proporciona los canales f\u00edsicos y l\u00f3gicos para la transmisi\u00f3n de mensajes entre agentes, herramientas y humanos. Soporta HTTP, WebSocket, STDIO y otros mecanismos seg\u00fan el entorno y las necesidades de integraci\u00f3n.</li> <li>Capa de Mensajer\u00eda (JSON-RPC 2.0)</li> <li>Define el formato est\u00e1ndar de los mensajes (solicitudes, respuestas, notificaciones) y asegura la interoperabilidad entre distintos participantes. Permite la extensi\u00f3n de m\u00e9todos y par\u00e1metros de manera estructurada.</li> <li>Capa de Comunicaci\u00f3n de Agentes</li> <li>Gestiona el registro, descubrimiento, negociaci\u00f3n de capacidades y la comunicaci\u00f3n directa entre agentes. Permite que los agentes se anuncien, describan sus funciones y colaboren en tareas complejas.</li> <li>Capa de Gobernanza y Aprobaciones</li> <li>Implementa los mecanismos de control humano, checkpoints de validaci\u00f3n, auditor\u00eda y trazabilidad. Permite definir reglas de aprobaci\u00f3n, escalaci\u00f3n y revisi\u00f3n en cada fase del workflow.</li> <li>Capa de Integraci\u00f3n de Herramientas</li> <li>Facilita la conexi\u00f3n y comunicaci\u00f3n con sistemas externos como IDEs, pipelines de CI/CD, plataformas de monitoreo, etc. Permite la integraci\u00f3n de eventos, comandos y resultados de herramientas de terceros.</li> <li>Capa de Orquestaci\u00f3n Multi-Agente</li> <li>Coordina la colaboraci\u00f3n entre m\u00faltiples agentes y humanos, gestionando el flujo de tareas, la asignaci\u00f3n de responsabilidades y la resoluci\u00f3n de dependencias o conflictos.</li> </ol> <p>Cada capa puede evolucionar de manera independiente, permitiendo la adaptaci\u00f3n del protocolo a nuevos escenarios, tecnolog\u00edas y requisitos sin comprometer la compatibilidad ni la seguridad.</p>"},{"location":"protocolo/#tipos-de-mensajes","title":"Tipos de Mensajes","text":"<p>El protocolo HugAI define varios tipos principales de mensajes, cada uno con un prop\u00f3sito espec\u00edfico dentro de los flujos de trabajo y la gobernanza:</p> <ol> <li>Inicializaci\u00f3n (<code>initialize</code>)</li> <li>Mensaje para establecer la conexi\u00f3n, negociar capacidades y compartir informaci\u00f3n de contexto entre agentes, clientes y el coordinador.</li> <li>Registro de Agentes (<code>agent/register</code>)</li> <li>Permite a los agentes anunciarse, describir sus capacidades y quedar disponibles para tareas espec\u00edficas.</li> <li>Solicitudes (<code>request</code>)</li> <li>Mensajes para solicitar la ejecuci\u00f3n de tareas, obtenci\u00f3n de informaci\u00f3n o inicio de flujos entre agentes y herramientas.</li> <li>Respuestas (<code>response</code>)</li> <li>Mensajes de retorno con los resultados, datos o estados derivados de una solicitud previa.</li> <li>Eventos (<code>event</code>)</li> <li>Notificaciones sobre cambios de estado, incidencias, progresos o cualquier suceso relevante en el sistema.</li> <li>Aprobaciones y Checkpoints (<code>governance/approval</code>)</li> <li>Mensajes para gestionar puntos de control humano, aprobaciones, revisiones y auditor\u00eda de decisiones cr\u00edticas.</li> <li>Integraci\u00f3n de Herramientas (<code>tool/integration</code>)</li> <li>Mensajes para interactuar con sistemas externos, ejecutar comandos, recibir resultados o integrar eventos de herramientas de terceros.</li> <li>Auditor\u00eda y Trazabilidad (<code>audit/log</code>)</li> <li>Mensajes para registrar acciones, decisiones y eventos relevantes, asegurando la trazabilidad y el cumplimiento normativo.</li> </ol> <p>Cada tipo de mensaje puede tener subtipos, par\u00e1metros y extensiones seg\u00fan el caso de uso y la evoluci\u00f3n del protocolo. Todos los mensajes siguen el formato estructurado de JSON-RPC 2.0 para garantizar la interoperabilidad y la extensibilidad.</p>"},{"location":"protocolo/#agentes-y-capacidades","title":"Agentes y Capacidades","text":"<p>En el protocolo HugAI, los agentes son entidades aut\u00f3nomas o semiaut\u00f3nomas que ofrecen capacidades especializadas (an\u00e1lisis, dise\u00f1o, implementaci\u00f3n, testing, operaciones, gobernanza, etc.). La gesti\u00f3n de sus capacidades es fundamental para la orquestaci\u00f3n eficiente y segura de los flujos de trabajo.</p>"},{"location":"protocolo/#registro-de-agentes","title":"Registro de Agentes","text":"<ul> <li>Cada agente debe registrarse en el sistema (directamente o a trav\u00e9s de un coordinador), anunciando su identidad, tipo, capacidades y nivel de gobernanza soportado.</li> <li>El registro incluye metadatos como nombre, versi\u00f3n, autor, descripci\u00f3n, tareas soportadas, entradas/salidas y requisitos de configuraci\u00f3n.</li> </ul>"},{"location":"protocolo/#descripcion-y-negociacion-de-capacidades","title":"Descripci\u00f3n y Negociaci\u00f3n de Capacidades","text":"<ul> <li>Las capacidades de un agente se describen mediante un esquema estructurado (por ejemplo, lista de tareas, tipos de datos soportados, restricciones, dependencias).</li> <li>Durante la inicializaci\u00f3n o en tiempo de ejecuci\u00f3n, los agentes pueden negociar capacidades con otros agentes o herramientas, permitiendo la adaptaci\u00f3n din\u00e1mica a distintos flujos y contextos.</li> <li>La negociaci\u00f3n puede incluir: asignaci\u00f3n de tareas, delegaci\u00f3n, escalaci\u00f3n, o ajuste de par\u00e1metros seg\u00fan la disponibilidad y el contexto del sistema.</li> </ul>"},{"location":"protocolo/#actualizacion-y-descubrimiento-dinamico","title":"Actualizaci\u00f3n y Descubrimiento Din\u00e1mico","text":"<ul> <li>El protocolo soporta la actualizaci\u00f3n din\u00e1mica de capacidades (por ejemplo, cuando un agente aprende una nueva tarea o se actualiza su modelo).</li> <li>Los agentes y herramientas pueden descubrir y consultar las capacidades de otros agentes registrados en cualquier momento, facilitando la colaboraci\u00f3n y la resiliencia del sistema.</li> </ul> <p>Esta gesti\u00f3n estructurada y din\u00e1mica de capacidades permite construir ecosistemas flexibles, escalables y seguros, donde cada agente aporta valor de manera controlada y auditable.</p>"},{"location":"protocolo/#flujos-de-comunicacion","title":"Flujos de Comunicaci\u00f3n","text":"<p>El protocolo HugAI define flujos de comunicaci\u00f3n estructurados para garantizar la coordinaci\u00f3n, trazabilidad y gobernanza en todo el ciclo de vida:</p> <ol> <li>Inicializaci\u00f3n</li> <li>Un agente o herramienta inicia la conexi\u00f3n, negocia capacidades y establece el contexto de trabajo.</li> <li>Orquestaci\u00f3n de Tareas</li> <li>Los agentes coordinan la asignaci\u00f3n, ejecuci\u00f3n y seguimiento de tareas, compartiendo contexto y resultados seg\u00fan las reglas de gobernanza.</li> <li>Checkpoints de Gobernanza</li> <li>En puntos cr\u00edticos, se requiere intervenci\u00f3n humana para aprobar, rechazar o solicitar revisiones antes de continuar.</li> <li>Escalaci\u00f3n y Resoluci\u00f3n de Incidencias</li> <li>Si un agente detecta un problema fuera de su alcance, escala la incidencia a un humano o a un agente de gobernanza para su resoluci\u00f3n.</li> <li>Cierre y Auditor\u00eda</li> <li>Al finalizar un flujo, se registran los resultados, decisiones y aprendizajes para auditor\u00eda y mejora continua.</li> </ol> <p>Estos flujos aseguran que la automatizaci\u00f3n est\u00e9 siempre bajo control humano y que todas las acciones sean trazables y auditables.</p>"},{"location":"protocolo/#seguridad-y-gobernanza","title":"Seguridad y Gobernanza","text":"<p>La seguridad y la gobernanza son pilares fundamentales del protocolo HugAI:</p> <ul> <li>Autenticaci\u00f3n y Autorizaci\u00f3n: Todos los agentes y herramientas deben autenticarse y estar autorizados para participar en los flujos. Se recomienda el uso de tokens, certificados o mecanismos equivalentes.</li> <li>Trazabilidad y Auditor\u00eda: Todas las acciones, decisiones y eventos relevantes deben ser registrados para permitir auditor\u00eda, cumplimiento normativo y an\u00e1lisis forense.</li> <li>Control Humano: Los puntos de control, aprobaciones y revisiones humanas son obligatorios en tareas cr\u00edticas o sensibles.</li> <li>Gesti\u00f3n de Permisos y Roles: El protocolo permite definir roles y permisos granulares para limitar el alcance de cada agente o herramienta.</li> <li>Protecci\u00f3n contra Sesgos y Errores: Se recomienda la validaci\u00f3n cruzada y la revisi\u00f3n humana para mitigar riesgos asociados a sesgos o errores de los modelos de IA.</li> </ul>"},{"location":"protocolo/#extensibilidad-y-versionado","title":"Extensibilidad y Versionado","text":"<p>El protocolo HugAI est\u00e1 dise\u00f1ado para evolucionar y adaptarse:</p> <ul> <li>Extensi\u00f3n de Mensajes: Se pueden agregar nuevos tipos de mensajes, m\u00e9todos y par\u00e1metros sin romper la compatibilidad con versiones anteriores.</li> <li>Negociaci\u00f3n de Versiones: Durante la inicializaci\u00f3n, los participantes negocian la versi\u00f3n del protocolo y las extensiones soportadas.</li> <li>Capacidades Personalizadas: Los agentes pueden anunciar y negociar capacidades espec\u00edficas, permitiendo la integraci\u00f3n de nuevas funciones o dominios.</li> <li>Deprecaci\u00f3n y Migraci\u00f3n: Se definen mecanismos para deprecar mensajes o capacidades y migrar a nuevas versiones de manera controlada.</li> </ul>"},{"location":"protocolo/#ejemplos-de-implementacion","title":"Ejemplos de Implementaci\u00f3n","text":"<p>A continuaci\u00f3n se presentan ejemplos m\u00ednimos de mensajes y flujos:</p> <ul> <li> <p>Inicializaci\u00f3n de un agente: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"agentId\": \"test-agent-1\",\n    \"capabilities\": [\"code-generation\", \"testing\"],\n    \"governanceLevel\": \"supervised\"\n  }\n}\n</code></pre></p> </li> <li> <p>Solicitud de tarea: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/request\",\n  \"params\": {\n    \"sourceAgent\": \"test-agent-1\",\n    \"targetAgent\": \"test-agent-2\",\n    \"task\": \"generate-tests\",\n    \"context\": {\"file\": \"main.ts\"},\n    \"priority\": \"high\"\n  }\n}\n</code></pre></p> </li> <li> <p>Aprobaci\u00f3n humana: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"governance/approval\",\n  \"params\": {\n    \"checkpoint\": \"code-review\",\n    \"artifact\": {\"file\": \"main.ts\", \"diff\": \"...\"},\n    \"approver\": \"user-123\",\n    \"decision\": \"approved\",\n    \"feedback\": \"Looks good.\"\n  }\n}\n</code></pre></p> </li> </ul>"},{"location":"protocolo/#roadmap-y-futuras-extensiones","title":"Roadmap y Futuras Extensiones","text":"<ul> <li>Integraci\u00f3n con sistemas de identidad y permisos avanzados.</li> <li>Soporte para nuevos tipos de agentes y capacidades (por ejemplo, agentes de compliance, agentes de explainability).</li> <li>Extensi\u00f3n a dominios fuera del desarrollo de software (por ejemplo, operaciones, seguridad, data science).</li> <li>Herramientas de validaci\u00f3n, simulaci\u00f3n y testing del protocolo.</li> <li>Comunidad y marketplace de agentes certificados.</li> <li>Integraci\u00f3n con est\u00e1ndares emergentes de IA responsable y \u00e9tica.</li> </ul> <p>NOTA: Este documento es el punto de partida para la versi\u00f3n 2 del protocolo HugAI. Cada secci\u00f3n ser\u00e1 completada y mejorada iterativamente. </p>"},{"location":"protocolo/especificacion/","title":"Especificaci\u00f3n T\u00e9cnica del Protocolo HugAI v2","text":"<p>Esta carpeta contiene la especificaci\u00f3n exhaustiva y estandarizada del protocolo HugAI v2, inspirada en la estructura de LSP.</p>"},{"location":"protocolo/especificacion/#indice-de-la-especificacion","title":"\u00cdndice de la Especificaci\u00f3n","text":"<ul> <li>1. Introducci\u00f3n y Alcance</li> <li>2. Tipos y Estructuras Base</li> <li>3. Mensajes del Protocolo</li> <li>4. Flujos y Secuencias</li> <li>5. Configuraci\u00f3n y Variables Globales</li> <li>6. Enumeraciones y Constantes</li> <li>7. Errores y Manejo de Excepciones</li> <li>8. Ejemplos y Casos de Uso</li> <li>9. Extensibilidad y Versionado</li> <li>10. Seguridad y Gobernanza</li> </ul> <p>Cada secci\u00f3n describe en detalle los componentes, campos, flujos y reglas del protocolo, con ejemplos y diagramas donde sea relevante.</p> <p>Nota: Esta especificaci\u00f3n est\u00e1 en desarrollo iterativo. Si tienes sugerencias o encuentras ambig\u00fcedades, por favor contribuye o abre un issue. </p>"},{"location":"protocolo/especificacion/agentes/","title":"Agentes y Roles en HugAI","text":"<p>Nota: Este documento complementa la metodolog\u00eda y la especificaci\u00f3n de HugAI, detallando los tipos de agentes, sus roles, capacidades y ejemplos de colaboraci\u00f3n.</p>"},{"location":"protocolo/especificacion/agentes/#tipos-de-agentes-especializados","title":"Tipos de Agentes Especializados","text":"Tipo de Agente Descripci\u00f3n Ejemplos de Tareas/Capacidades An\u00e1lisis Analizan requisitos, contexto y necesidades del proyecto Extracci\u00f3n de requisitos, validaci\u00f3n, refinamiento de prompts, an\u00e1lisis de dominio Dise\u00f1o Proponen arquitecturas, modelos y rutas de soluci\u00f3n Dise\u00f1o de arquitectura, modelado de datos, definici\u00f3n de APIs, ruteo de tareas Implementaci\u00f3n Generan c\u00f3digo, integran APIs, escriben documentaci\u00f3n Generaci\u00f3n de c\u00f3digo, integraci\u00f3n de servicios, documentaci\u00f3n autom\u00e1tica Calidad Eval\u00faan y mejoran la calidad del software Generaci\u00f3n y ejecuci\u00f3n de tests, an\u00e1lisis de seguridad, revisi\u00f3n de c\u00f3digo, performance Operaciones Gestionan despliegues, monitoreo y mantenimiento Despliegue, CI/CD, monitoreo, mantenimiento, observabilidad Gobernanza Supervisan cumplimiento, riesgos y puntos cr\u00edticos Compliance, gesti\u00f3n de riesgos, auditor\u00eda, gesti\u00f3n de aprobaciones, escalaci\u00f3n"},{"location":"protocolo/especificacion/agentes/#ejemplos-concretos-de-agentes-y-colaboracion","title":"Ejemplos Concretos de Agentes y Colaboraci\u00f3n","text":"<ul> <li>Requirements Analyzer: Extrae y valida requisitos a partir de descripciones de usuario.</li> <li>Domain Expert: Proporciona conocimiento espec\u00edfico del dominio (ej. salud, finanzas).</li> <li>Prompt Refiner: Optimiza prompts para agentes generativos.</li> <li>Architecture Agent: Propone y valida arquitecturas de software.</li> <li>Router Agent: Asigna tareas al agente m\u00e1s adecuado seg\u00fan contexto.</li> <li>Code Generator: Genera c\u00f3digo fuente a partir de especificaciones.</li> <li>Integration Agent: Gestiona la integraci\u00f3n de APIs y servicios externos.</li> <li>Documentation Writer: Genera documentaci\u00f3n t\u00e9cnica y de usuario.</li> <li>Test Agent: Crea y ejecuta pruebas unitarias, de integraci\u00f3n y end-to-end.</li> <li>Security Agent: Realiza an\u00e1lisis de vulnerabilidades y cumplimiento de pol\u00edticas.</li> <li>Performance Agent: Eval\u00faa el rendimiento y propone optimizaciones.</li> <li>Code Reviewer: Revisa la calidad y estilo del c\u00f3digo generado.</li> <li>Deployment Agent: Automatiza el despliegue en distintos entornos.</li> <li>DevOps Agent: Orquesta pipelines de CI/CD y operaciones.</li> <li>Maintenance Agent: Supervisa la salud del sistema y aplica parches.</li> <li>Observability Agent: Configura y monitoriza m\u00e9tricas y logs.</li> <li>Compliance Agent: Verifica el cumplimiento normativo y regulatorio.</li> <li>Risk Management Agent: Eval\u00faa riesgos y propone mitigaciones.</li> <li>Escalation Manager: Gestiona incidencias cr\u00edticas y escalaciones.</li> </ul>"},{"location":"protocolo/especificacion/agentes/#ejemplo-de-colaboracion-y-flujos","title":"Ejemplo de Colaboraci\u00f3n y Flujos","text":"<ol> <li>Flujo de desarrollo t\u00edpico:</li> <li>Requirements Analyzer extrae requisitos \u2192 Architecture Agent dise\u00f1a la soluci\u00f3n \u2192 Code Generator implementa \u2192 Test Agent valida \u2192 Code Reviewer revisa \u2192 Deployment Agent despliega.</li> <li>Checkpoints de gobernanza:</li> <li>Compliance Agent y Risk Management Agent pueden requerir aprobaci\u00f3n humana antes de avanzar.</li> <li>Escalation Manager interviene si hay incidencias cr\u00edticas.</li> <li>Colaboraci\u00f3n din\u00e1mica:</li> <li>Router Agent puede reasignar tareas seg\u00fan disponibilidad o especializaci\u00f3n.</li> <li>Observability Agent y Maintenance Agent colaboran para mantener la salud del sistema.</li> </ol> <p>Nota: Los agentes pueden ser implementados como servicios independientes, m\u00f3dulos o integraciones, y su colaboraci\u00f3n es orquestada por el protocolo HugAI, respetando los niveles de gobernanza y los checkpoints definidos. </p>"},{"location":"protocolo/especificacion/configuracion/","title":"5. Configuraci\u00f3n y Variables - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n describe c\u00f3mo se configuran el sistema, los agentes y las variables clave en el protocolo HugAI v2.</p>"},{"location":"protocolo/especificacion/configuracion/#51-descripcion-general","title":"5.1. Descripci\u00f3n General","text":"<p>La configuraci\u00f3n en HugAI v2 permite adaptar el comportamiento de agentes, clientes y el sistema central. Puede gestionarse mediante archivos (JSON/YAML), variables de entorno o par\u00e1metros en tiempo de ejecuci\u00f3n.</p>"},{"location":"protocolo/especificacion/configuracion/#52-variables-globales-y-de-entorno","title":"5.2. Variables Globales y de Entorno","text":"Variable Tipo Descripci\u00f3n governanceLevel string Nivel de gobernanza: autonomous, supervised, human-in-the-loop workspaceFolders string[] Rutas de carpetas de trabajo asociadas capabilities object Capacidades habilitadas para el agente o sistema logging.level string Nivel de log: error, warn, info, debug, trace logging.path string Ruta del archivo/log integration.tools object[] Herramientas externas integradas agentId string Identificador \u00fanico del agente agentSecret string Token/clave para autenticaci\u00f3n (si aplica) environment string Entorno: development, staging, production"},{"location":"protocolo/especificacion/configuracion/#53-ejemplo-de-archivo-de-configuracion-json","title":"5.3. Ejemplo de Archivo de Configuraci\u00f3n (JSON)","text":"<pre><code>{\n  \"agentId\": \"demo-agent-1\",\n  \"governanceLevel\": \"supervised\",\n  \"workspaceFolders\": [\"/proyecto/demo\"],\n  \"capabilities\": {\n    \"code-generation\": true,\n    \"testing\": true,\n    \"refactoring\": false\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"path\": \"./logs/agent.log\"\n  },\n  \"integration\": {\n    \"tools\": [\n      { \"name\": \"ci-pipeline\", \"enabled\": true },\n      { \"name\": \"static-analysis\", \"enabled\": false }\n    ]\n  },\n  \"environment\": \"development\"\n}\n</code></pre>"},{"location":"protocolo/especificacion/configuracion/#54-parametros-clave","title":"5.4. Par\u00e1metros Clave","text":"<ul> <li>governanceLevel: Define el grado de intervenci\u00f3n humana. Valores t\u00edpicos:</li> <li><code>autonomous</code>: El agente act\u00faa sin intervenci\u00f3n humana.</li> <li><code>supervised</code>: Requiere revisiones o aprobaciones en puntos cr\u00edticos.</li> <li> <p><code>human-in-the-loop</code>: Toda acci\u00f3n relevante requiere aprobaci\u00f3n humana.</p> </li> <li> <p>workspaceFolders: Directorios de trabajo sobre los que opera el agente.</p> </li> <li> <p>capabilities: Funcionalidades habilitadas (ej. code-generation, testing, refactoring).</p> </li> <li> <p>logging: Configuraci\u00f3n de logs para auditor\u00eda y depuraci\u00f3n.</p> </li> <li> <p>integration.tools: Herramientas externas disponibles para el agente.</p> </li> <li> <p>agentId / agentSecret: Identificadores y credenciales para autenticaci\u00f3n y trazabilidad.</p> </li> <li> <p>environment: Permite adaptar el comportamiento seg\u00fan el entorno (desarrollo, producci\u00f3n, etc.).</p> </li> </ul>"},{"location":"protocolo/especificacion/configuracion/#55-buenas-practicas-para-la-gestion-de-configuracion","title":"5.5. Buenas Pr\u00e1cticas para la Gesti\u00f3n de Configuraci\u00f3n","text":"<ul> <li>Usar archivos de configuraci\u00f3n versionados y validados.</li> <li>Separar credenciales sensibles (ej. agentSecret) usando variables de entorno.</li> <li>Documentar todos los par\u00e1metros y valores posibles.</li> <li>Validar la configuraci\u00f3n al inicio y ante cambios din\u00e1micos.</li> <li>Permitir la sobreescritura de par\u00e1metros por l\u00ednea de comandos o variables de entorno.</li> <li>Mantener la configuraci\u00f3n modular para facilitar la extensi\u00f3n y personalizaci\u00f3n.</li> </ul> <p>Nota: La configuraci\u00f3n puede evolucionar seg\u00fan las necesidades del sistema y los agentes. Se recomienda mantener compatibilidad hacia atr\u00e1s y documentar los cambios. </p>"},{"location":"protocolo/especificacion/ejemplos/","title":"10. Ejemplos de Uso y Casos Pr\u00e1cticos - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n presenta ejemplos completos y casos pr\u00e1cticos de uso del protocolo HugAI v2, con mensajes JSON y diagramas de secuencia.</p>"},{"location":"protocolo/especificacion/ejemplos/#101-ciclo-completo-inicializacion-registro-solicitud-aprobacion-y-auditoria","title":"10.1. Ciclo Completo: Inicializaci\u00f3n, Registro, Solicitud, Aprobaci\u00f3n y Auditor\u00eda","text":"<p>Flujo: Un agente se inicializa, se registra, solicita una tarea que requiere aprobaci\u00f3n humana, y todo queda auditado.</p> <pre><code>sequenceDiagram\n    participant Cliente\n    participant Protocolo\n    participant Agente\n    participant Humano\n    participant Auditor\u00eda\n    Cliente-&gt;&gt;Protocolo: initialize\n    Protocolo--&gt;&gt;Cliente: response\n    Cliente-&gt;&gt;Protocolo: agent/register\n    Protocolo--&gt;&gt;Cliente: response\n    Cliente-&gt;&gt;Protocolo: agent/request (tarea cr\u00edtica)\n    Protocolo-&gt;&gt;Humano: governance/approval\n    Humano--&gt;&gt;Protocolo: governance/approval (decisi\u00f3n)\n    Protocolo--&gt;&gt;Cliente: response\n    Protocolo-&gt;&gt;Auditor\u00eda: audit/log</code></pre> <p>Mensajes JSON: - <code>initialize</code>, <code>agent/register</code>, <code>agent/request</code>, <code>governance/approval</code>, <code>response</code>, <code>audit/log</code></p>"},{"location":"protocolo/especificacion/ejemplos/#102-integracion-con-herramienta-externa-cicd","title":"10.2. Integraci\u00f3n con Herramienta Externa (CI/CD)","text":"<p>Flujo: Un agente solicita ejecutar pruebas en una herramienta CI/CD y recibe el resultado.</p> <pre><code>sequenceDiagram\n    participant Agente\n    participant Protocolo\n    participant CI\n    Agente-&gt;&gt;Protocolo: tool/integration (run-tests)\n    Protocolo-&gt;&gt;CI: tool/integration (run-tests)\n    CI--&gt;&gt;Protocolo: response (resultado)\n    Protocolo--&gt;&gt;Agente: response (resultado)</code></pre> <p>Mensaje de solicitud: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tool/integration\",\n  \"params\": {\n    \"tool\": \"ci-pipeline\",\n    \"action\": \"run-tests\",\n    \"data\": { \"branch\": \"main\" }\n  },\n  \"id\": 20\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/ejemplos/#103-caso-de-gobernanza-humana","title":"10.3. Caso de Gobernanza Humana","text":"<p>Flujo: Un agente genera c\u00f3digo, pero requiere revisi\u00f3n y aprobaci\u00f3n humana antes de integrarlo.</p> <pre><code>sequenceDiagram\n    participant Agente\n    participant Protocolo\n    participant Humano\n    Agente-&gt;&gt;Protocolo: agent/request (code-generation)\n    Protocolo-&gt;&gt;Humano: governance/approval (revisi\u00f3n de c\u00f3digo)\n    Humano--&gt;&gt;Protocolo: governance/approval (aprobado/rechazado)\n    Protocolo--&gt;&gt;Agente: response</code></pre> <p>Mensaje de aprobaci\u00f3n: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"governance/approval\",\n  \"params\": {\n    \"checkpoint\": \"code-review\",\n    \"artifact\": { \"file\": \"main.ts\", \"diff\": \"...\" },\n    \"approver\": \"user-123\",\n    \"decision\": \"approved\",\n    \"feedback\": \"Cumple con los est\u00e1ndares.\"\n  },\n  \"id\": 21\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/ejemplos/#104-ejemplo-de-extensioncustomizacion","title":"10.4. Ejemplo de Extensi\u00f3n/Customizaci\u00f3n","text":"<p>Flujo: Un agente especializado realiza un an\u00e1lisis de seguridad usando un mensaje custom.</p> <pre><code>sequenceDiagram\n    participant Cliente\n    participant Protocolo\n    participant SecurityAgent\n    Cliente-&gt;&gt;Protocolo: agent/securityScan (custom)\n    Protocolo-&gt;&gt;SecurityAgent: agent/securityScan\n    SecurityAgent--&gt;&gt;Protocolo: response (resultado)\n    Protocolo--&gt;&gt;Cliente: response (resultado)</code></pre> <p>Mensaje custom: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/securityScan\",\n  \"params\": {\n    \"target\": \"main.ts\",\n    \"level\": \"deep\"\n  },\n  \"id\": 22\n}\n</code></pre></p> <p>Nota: Estos ejemplos pueden adaptarse y ampliarse seg\u00fan los escenarios de uso y la evoluci\u00f3n del protocolo. </p>"},{"location":"protocolo/especificacion/enums-errores/","title":"7. Enumeraciones y C\u00f3digos de Error - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n define las enumeraciones clave y los c\u00f3digos de error est\u00e1ndar utilizados en el protocolo HugAI v2.</p>"},{"location":"protocolo/especificacion/enums-errores/#71-enumeraciones-clave","title":"7.1. Enumeraciones Clave","text":""},{"location":"protocolo/especificacion/enums-errores/#governancelevel","title":"governanceLevel","text":"Valor Descripci\u00f3n autonomous El agente act\u00faa sin intervenci\u00f3n humana supervised Requiere revisiones/aprobaciones en puntos clave human-in-the-loop Toda acci\u00f3n relevante requiere aprobaci\u00f3n humana manual Solo sugiere acciones, humano debe ejecutarlas"},{"location":"protocolo/especificacion/enums-errores/#decision-gobernanza","title":"decision (gobernanza)","text":"Valor Descripci\u00f3n approved Aprobado rejected Rechazado needs_revision Requiere revisi\u00f3n/cambios"},{"location":"protocolo/especificacion/enums-errores/#priority","title":"priority","text":"Valor Descripci\u00f3n low Baja prioridad medium Prioridad media high Alta prioridad critical Cr\u00edtica/urgente"},{"location":"protocolo/especificacion/enums-errores/#logginglevel","title":"logging.level","text":"Valor Descripci\u00f3n error Solo errores graves warn Advertencias info Informaci\u00f3n general debug Depuraci\u00f3n detallada trace Trazas completas"},{"location":"protocolo/especificacion/enums-errores/#environment","title":"environment","text":"Valor Descripci\u00f3n development Entorno de desarrollo staging Pre-producci\u00f3n/pruebas production Producci\u00f3n"},{"location":"protocolo/especificacion/enums-errores/#72-codigos-de-error-estandar","title":"7.2. C\u00f3digos de Error Est\u00e1ndar","text":"C\u00f3digo Nombre Descripci\u00f3n Uso T\u00edpico -32700 Parse Error Error al parsear el mensaje JSON JSON mal formado -32600 Invalid Request La solicitud no es v\u00e1lida Formato incorrecto -32601 Method Not Found El m\u00e9todo solicitado no existe M\u00e9todo no implementado -32602 Invalid Params Par\u00e1metros inv\u00e1lidos o faltantes Error de validaci\u00f3n -32603 Internal Error Error interno del sistema/agente Excepci\u00f3n inesperada -32000 Governance Required Se requiere intervenci\u00f3n/aprobaci\u00f3n humana Falta de aprobaci\u00f3n -32001 Capability Not Allowed Capacidad no permitida para el agente Restricci\u00f3n de permisos -32002 Tool Integration Error Error al interactuar con herramienta externa Fallo de integraci\u00f3n -32003 Audit Log Failure No se pudo registrar en auditor\u00eda Problema de trazabilidad -32010 Agent Not Found El agente solicitado no existe o no est\u00e1 disponible Error de ruteo o registro -32011 Governance Violation Violaci\u00f3n de pol\u00edtica de gobernanza Acci\u00f3n no permitida por reglas -32012 Human Approval Required Se requiere aprobaci\u00f3n humana expl\u00edcita Checkpoint obligatorio -32013 Workflow State Error Estado inconsistente en el flujo de trabajo Fase o transici\u00f3n inv\u00e1lida"},{"location":"protocolo/especificacion/enums-errores/#73-ejemplo-de-uso-en-mensajes","title":"7.3. Ejemplo de Uso en Mensajes","text":"<p>Error de m\u00e9todo no soportado: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": { \"code\": -32601, \"message\": \"M\u00e9todo no soportado\" }\n}\n</code></pre></p> <p>Error de gobernanza requerida: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"error\": { \"code\": -32000, \"message\": \"Se requiere aprobaci\u00f3n humana\" }\n}\n</code></pre></p> <p>Error de agente no encontrado: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"error\": { \"code\": -32010, \"message\": \"El agente solicitado no existe\" }\n}\n</code></pre></p> <p>Error de integraci\u00f3n de herramienta: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6,\n  \"error\": { \"code\": -32002, \"message\": \"Error al interactuar con herramienta externa\" }\n}\n</code></pre></p> <p>Nota: Los c\u00f3digos negativos siguen la convenci\u00f3n JSON-RPC. Se pueden definir c\u00f3digos adicionales seg\u00fan necesidades del sistema y la evoluci\u00f3n del protocolo. </p>"},{"location":"protocolo/especificacion/extensibilidad/","title":"8. Extensibilidad y Personalizaci\u00f3n - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n describe c\u00f3mo el protocolo HugAI v2 puede extenderse y personalizarse para adaptarse a nuevas necesidades, agentes, capacidades y escenarios.</p>"},{"location":"protocolo/especificacion/extensibilidad/#81-principios-de-extensibilidad","title":"8.1. Principios de Extensibilidad","text":"<ul> <li>El protocolo est\u00e1 dise\u00f1ado para ser modular y evolutivo.</li> <li>Permite la adici\u00f3n de nuevos tipos de mensajes, capacidades, agentes y flujos sin romper la compatibilidad existente.</li> <li>Se recomienda seguir convenciones de nombres y documentar todas las extensiones.</li> </ul>"},{"location":"protocolo/especificacion/extensibilidad/#82-anadir-nuevos-tipos-de-mensajes-o-capacidades","title":"8.2. A\u00f1adir Nuevos Tipos de Mensajes o Capacidades","text":"<ul> <li>Nuevos mensajes: Se pueden definir m\u00e9todos adicionales siguiendo el esquema JSON-RPC, por ejemplo: <code>agent/customAction</code>, <code>tool/notify</code>, etc.</li> <li>Nuevas capacidades: Los agentes pueden anunciar capacidades adicionales en su registro (<code>capabilities</code>), por ejemplo: <code>\"code-review\": true</code>.</li> <li>Nuevos agentes: Basta con registrar el agente y sus capacidades, siguiendo el flujo est\u00e1ndar.</li> </ul>"},{"location":"protocolo/especificacion/extensibilidad/#83-ejemplo-de-extension-mensaje-custom","title":"8.3. Ejemplo de Extensi\u00f3n (Mensaje Custom)","text":"<p>Definici\u00f3n de un nuevo mensaje para an\u00e1lisis de seguridad:</p> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/securityScan\",\n  \"params\": {\n    \"target\": \"main.ts\",\n    \"level\": \"deep\"\n  },\n  \"id\": 10\n}\n</code></pre> <p>El agente puede anunciar la nueva capability: <pre><code>{\n  \"agentId\": \"security-agent-1\",\n  \"capabilities\": { \"security-scan\": true }\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/extensibilidad/#84-buenas-practicas-para-extension-y-compatibilidad","title":"8.4. Buenas Pr\u00e1cticas para Extensi\u00f3n y Compatibilidad","text":"<ul> <li>Usar prefijos claros para m\u00e9todos custom (<code>agent/</code>, <code>tool/</code>, <code>governance/</code>, etc.).</li> <li>Documentar cada extensi\u00f3n y su prop\u00f3sito.</li> <li>Mantener la compatibilidad hacia atr\u00e1s siempre que sea posible.</li> <li>Validar extensiones antes de desplegarlas en entornos cr\u00edticos.</li> <li>Compartir extensiones \u00fatiles con la comunidad para su posible estandarizaci\u00f3n.</li> </ul>"},{"location":"protocolo/especificacion/extensibilidad/#85-interoperabilidad-y-modularidad","title":"8.5. Interoperabilidad y Modularidad","text":"<ul> <li>Las extensiones deben ser opcionales y negociables entre agentes y el sistema.</li> <li>Se recomienda que los agentes ignoren mensajes/campos desconocidos, salvo que sean cr\u00edticos.</li> <li>Modularizar capacidades y flujos facilita la integraci\u00f3n con otros sistemas y la evoluci\u00f3n del protocolo.</li> </ul> <p>Nota: La extensibilidad es clave para la evoluci\u00f3n del protocolo. Se recomienda mantener un registro de extensiones y promover la interoperabilidad entre implementaciones. </p>"},{"location":"protocolo/especificacion/flujos/","title":"4. Flujos de Comunicaci\u00f3n y Secuencias - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n describe los principales flujos de comunicaci\u00f3n entre agentes, humanos y herramientas en el protocolo HugAI v2, usando diagramas de secuencia y ejemplos.</p>"},{"location":"protocolo/especificacion/flujos/#40-tabla-de-fases-agentes-y-checkpoints","title":"4.0. Tabla de Fases, Agentes y Checkpoints","text":"Fase Agentes Principales Checkpoints de Gobernanza Descripci\u00f3n breve An\u00e1lisis Requirements Analyzer, Domain Expert Revisi\u00f3n de requisitos Extracci\u00f3n y validaci\u00f3n de requisitos, contexto Dise\u00f1o Architecture Agent, Router Agent Aprobaci\u00f3n de arquitectura Dise\u00f1o de arquitectura, modelos y APIs Implementaci\u00f3n Code Generator, Integration Agent, Documentation Writer Revisi\u00f3n de c\u00f3digo, documentaci\u00f3n Generaci\u00f3n de c\u00f3digo, integraci\u00f3n, documentaci\u00f3n Calidad Test Agent, Security Agent, Performance Agent, Code Reviewer Aprobaci\u00f3n de calidad, seguridad Testing, an\u00e1lisis de seguridad, performance, revisi\u00f3n Operaciones Deployment Agent, DevOps Agent, Maintenance Agent, Observability Agent Aprobaci\u00f3n de despliegue, monitoreo Despliegue, CI/CD, monitoreo, mantenimiento Gobernanza Compliance Agent, Risk Management Agent, Escalation Manager Auditor\u00eda, compliance, gesti\u00f3n de riesgos Supervisi\u00f3n, cumplimiento, gesti\u00f3n de incidencias"},{"location":"protocolo/especificacion/flujos/#401-diagrama-de-fases-agentes-y-checkpoints","title":"4.0.1. Diagrama de Fases, Agentes y Checkpoints","text":"<pre><code>flowchart TD\n    A[An\u00e1lisis] --&gt;|Requisitos validados| B[Dise\u00f1o]\n    B --&gt;|Arquitectura aprobada| C[Implementaci\u00f3n]\n    C --&gt;|C\u00f3digo revisado| D[Calidad]\n    D --&gt;|Calidad aprobada| E[Operaciones]\n    E --&gt;|Despliegue aprobado| F[Fin]\n    subgraph Checkpoints\n      A1[Revisi\u00f3n de requisitos]\n      B1[Aprobaci\u00f3n de arquitectura]\n      C1[Revisi\u00f3n de c\u00f3digo]\n      D1[Aprobaci\u00f3n de calidad]\n      E1[Aprobaci\u00f3n de despliegue]\n      F1[Auditor\u00eda/Compliance]\n    end\n    A --&gt; A1\n    B --&gt; B1\n    C --&gt; C1\n    D --&gt; D1\n    E --&gt; E1\n    F --&gt; F1</code></pre>"},{"location":"protocolo/especificacion/flujos/#402-explicacion-de-fases-y-colaboracion","title":"4.0.2. Explicaci\u00f3n de Fases y Colaboraci\u00f3n","text":"<ul> <li>An\u00e1lisis: Los agentes de an\u00e1lisis extraen y validan requisitos, con revisi\u00f3n humana si es necesario.</li> <li>Dise\u00f1o: Los agentes de dise\u00f1o proponen arquitecturas y modelos, sujetos a aprobaci\u00f3n de stakeholders.</li> <li>Implementaci\u00f3n: Los agentes de implementaci\u00f3n generan c\u00f3digo y documentaci\u00f3n, revisados por agentes de calidad y humanos.</li> <li>Calidad: Los agentes de calidad ejecutan tests, an\u00e1lisis de seguridad y performance, con checkpoints de aprobaci\u00f3n.</li> <li>Operaciones: Los agentes de operaciones despliegan, monitorizan y mantienen el sistema, con aprobaciones para despliegues cr\u00edticos.</li> <li>Gobernanza: Los agentes de gobernanza supervisan compliance, riesgos y gestionan incidencias, con auditor\u00eda y checkpoints finales.</li> </ul>"},{"location":"protocolo/especificacion/flujos/#41-inicializacion-y-registro-de-agente","title":"4.1. Inicializaci\u00f3n y Registro de Agente","text":"<p>Descripci\u00f3n: Un cliente o agente inicia la conexi\u00f3n, negocia capacidades y se registra en el sistema.</p> <pre><code>sequenceDiagram\n    participant Cliente\n    participant Protocolo\n    participant Agente\n    Cliente-&gt;&gt;Protocolo: initialize\n    Protocolo--&gt;&gt;Cliente: response (ack)\n    Cliente-&gt;&gt;Protocolo: agent/register\n    Protocolo--&gt;&gt;Cliente: response (registro exitoso)\n    Protocolo-&gt;&gt;Agente: notificaci\u00f3n de nuevo agente (opcional)</code></pre> <p>Ejemplo de mensajes: - <code>initialize</code> - <code>agent/register</code> - <code>response</code></p>"},{"location":"protocolo/especificacion/flujos/#42-solicitud-y-respuesta-de-tarea-entre-agentes","title":"4.2. Solicitud y Respuesta de Tarea entre Agentes","text":"<p>Descripci\u00f3n: Un agente solicita a otro la ejecuci\u00f3n de una tarea y recibe la respuesta.</p> <pre><code>sequenceDiagram\n    participant AgenteA\n    participant Protocolo\n    participant AgenteB\n    AgenteA-&gt;&gt;Protocolo: agent/request (tarea)\n    Protocolo-&gt;&gt;AgenteB: agent/request (tarea)\n    AgenteB--&gt;&gt;Protocolo: response (resultado)\n    Protocolo--&gt;&gt;AgenteA: response (resultado)</code></pre> <p>Ejemplo de mensajes: - <code>agent/request</code> - <code>response</code></p>"},{"location":"protocolo/especificacion/flujos/#43-flujo-de-gobernanza-y-aprobacion-humana","title":"4.3. Flujo de Gobernanza y Aprobaci\u00f3n Humana","text":"<p>Descripci\u00f3n: Un agente o el sistema solicita aprobaci\u00f3n humana para un artefacto o decisi\u00f3n cr\u00edtica.</p> <pre><code>sequenceDiagram\n    participant Agente\n    participant Protocolo\n    participant Humano\n    Agente-&gt;&gt;Protocolo: governance/approval (solicitud)\n    Protocolo-&gt;&gt;Humano: notificaci\u00f3n de aprobaci\u00f3n\n    Humano--&gt;&gt;Protocolo: governance/approval (decisi\u00f3n)\n    Protocolo--&gt;&gt;Agente: response (decisi\u00f3n)</code></pre> <p>Ejemplo de mensajes: - <code>governance/approval</code> - <code>response</code></p>"},{"location":"protocolo/especificacion/flujos/#44-integracion-de-herramientas-externas","title":"4.4. Integraci\u00f3n de Herramientas Externas","text":"<p>Descripci\u00f3n: Un agente interact\u00faa con una herramienta externa (CI/CD, an\u00e1lisis, etc.) a trav\u00e9s del protocolo.</p> <pre><code>sequenceDiagram\n    participant Agente\n    participant Protocolo\n    participant Herramienta\n    Agente-&gt;&gt;Protocolo: tool/integration (acci\u00f3n)\n    Protocolo-&gt;&gt;Herramienta: tool/integration (acci\u00f3n)\n    Herramienta--&gt;&gt;Protocolo: response (resultado)\n    Protocolo--&gt;&gt;Agente: response (resultado)</code></pre> <p>Ejemplo de mensajes: - <code>tool/integration</code> - <code>response</code></p>"},{"location":"protocolo/especificacion/flujos/#45-auditoria-y-trazabilidad","title":"4.5. Auditor\u00eda y Trazabilidad","text":"<p>Descripci\u00f3n: Todas las acciones relevantes se registran para trazabilidad y cumplimiento.</p> <pre><code>sequenceDiagram\n    participant Actor\n    participant Protocolo\n    participant Auditor\u00eda\n    Actor-&gt;&gt;Protocolo: acci\u00f3n relevante (cualquier mensaje)\n    Protocolo-&gt;&gt;Auditor\u00eda: audit/log\n    Auditor\u00eda--&gt;&gt;Protocolo: response (ack)</code></pre> <p>Ejemplo de mensajes: - <code>audit/log</code> - <code>response</code></p> <p>Nota: Estos flujos pueden combinarse y extenderse seg\u00fan la complejidad del sistema y los escenarios de uso. </p>"},{"location":"protocolo/especificacion/glosario/","title":"11. Glosario y FAQ - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n proporciona definiciones de t\u00e9rminos clave y responde preguntas frecuentes sobre el protocolo HugAI v2.</p>"},{"location":"protocolo/especificacion/glosario/#111-glosario-de-terminos","title":"11.1. Glosario de T\u00e9rminos","text":"<ul> <li>Agente: Entidad aut\u00f3noma (software) que ejecuta tareas, colabora y se comunica mediante el protocolo.</li> <li>Gobernanza: Mecanismos y pol\u00edticas para supervisar, aprobar y auditar acciones de agentes y humanos.</li> <li>Capability: Funcionalidad o tarea espec\u00edfica que un agente puede anunciar y ejecutar (ej. code-generation, testing).</li> <li>Workspace: Conjunto de carpetas o recursos sobre los que opera un agente.</li> <li>Approval: Proceso de revisi\u00f3n y autorizaci\u00f3n humana para acciones cr\u00edticas.</li> <li>Audit: Registro detallado de acciones, decisiones y eventos para trazabilidad y cumplimiento.</li> <li>Mensaje: Estructura JSON intercambiada entre agentes, humanos y herramientas siguiendo el protocolo.</li> <li>Extensi\u00f3n: Adici\u00f3n de nuevos mensajes, capacidades o flujos al protocolo base.</li> <li>Integraci\u00f3n: Conexi\u00f3n con herramientas externas (CI/CD, an\u00e1lisis, etc.) mediante mensajes est\u00e1ndar o custom.</li> <li>Human-in-the-loop: Modelo donde la intervenci\u00f3n humana es obligatoria en puntos cr\u00edticos.</li> <li>Supervised: Modelo donde la intervenci\u00f3n humana es opcional o en puntos definidos.</li> <li>Autonomous: Modelo donde los agentes act\u00faan sin intervenci\u00f3n humana.</li> </ul>"},{"location":"protocolo/especificacion/glosario/#112-preguntas-frecuentes-faq","title":"11.2. Preguntas Frecuentes (FAQ)","text":"<p>\u00bfQu\u00e9 es HugAI v2 y para qu\u00e9 sirve?</p> <p>Es un protocolo abierto para orquestar agentes de IA y humanos en procesos de desarrollo y automatizaci\u00f3n, con gobernanza y trazabilidad.</p> <p>\u00bfC\u00f3mo se extiende el protocolo?</p> <p>A\u00f1adiendo nuevos tipos de mensajes, capacidades o agentes siguiendo el esquema JSON-RPC y documentando la extensi\u00f3n.</p> <p>\u00bfQu\u00e9 mecanismos de seguridad existen?</p> <p>Autenticaci\u00f3n de agentes y humanos, validaci\u00f3n de mensajes, auditor\u00eda, uso de canales cifrados y gesti\u00f3n segura de secretos.</p> <p>\u00bfPuedo integrar mis propias herramientas?</p> <p>S\u00ed, mediante mensajes <code>tool/integration</code> o extensiones custom, siempre siguiendo las buenas pr\u00e1cticas de validaci\u00f3n y seguridad.</p> <p>\u00bfQu\u00e9 pasa si un agente recibe un mensaje desconocido?</p> <p>Debe ignorarlo (si no es cr\u00edtico) o responder con un error est\u00e1ndar, manteniendo la robustez y compatibilidad.</p> <p>\u00bfC\u00f3mo se gestiona la configuraci\u00f3n?</p> <p>Mediante archivos (JSON/YAML), variables de entorno y par\u00e1metros en tiempo de ejecuci\u00f3n, siguiendo las buenas pr\u00e1cticas documentadas.</p> <p>\u00bfQu\u00e9 niveles de gobernanza existen?</p> <p>Autonomous, supervised y human-in-the-loop, seg\u00fan el grado de intervenci\u00f3n humana requerido.</p> <p>\u00bfC\u00f3mo se auditan las acciones?</p> <p>Usando el mensaje <code>audit/log</code> para registrar actor, acci\u00f3n, timestamp, detalles y resultado en sistemas protegidos.</p> <p>\u00bfEl protocolo es compatible con JSON-RPC?</p> <p>S\u00ed, se basa en JSON-RPC 2.0 para la estructura de mensajes y extensibilidad.</p> <p>Nota: Para dudas adicionales, sugerencias o contribuciones, consultar la documentaci\u00f3n oficial o contactar con los responsables del protocolo. </p>"},{"location":"protocolo/especificacion/headers/","title":"Headers del Protocolo HugAI v2","text":"<p>Esta secci\u00f3n describe la estructura y uso de los headers en el protocolo HugAI v2, asegurando compatibilidad y extensibilidad.</p>"},{"location":"protocolo/especificacion/headers/#1-estructura-de-headers","title":"1. Estructura de Headers","text":"<p>Los mensajes del protocolo HugAI v2 siguen una estructura similar a LSP, separando headers y cuerpo (body) del mensaje. Los headers se env\u00edan en texto plano (ASCII), seguidos de una l\u00ednea vac\u00eda (<code>\\r\\n</code>), y luego el contenido JSON (body).</p>"},{"location":"protocolo/especificacion/headers/#2-tabla-de-headers-soportados","title":"2. Tabla de Headers Soportados","text":"Header Field Name Tipo Descripci\u00f3n Content-Length number Longitud del contenido JSON en bytes. Obligatorio. Content-Type string Tipo MIME del contenido. Por defecto: application/vscode-jsonrpc; charset=utf-8 HugAI-Version string Versi\u00f3n del protocolo HugAI. Ej: 2.0.0 Governance-Level string Nivel de gobernanza requerido: autonomous, supervised, human-in-the-loop, manual Request-Id string/number Identificador \u00fanico de la solicitud (opcional, redundante con JSON-RPC) Custom-* string Headers personalizados para extensiones futuras"},{"location":"protocolo/especificacion/headers/#3-ejemplo-de-mensaje-completo-headers-body","title":"3. Ejemplo de Mensaje Completo (Headers + Body)","text":"<pre><code>Content-Length: 234\\r\\n\nContent-Type: application/vscode-jsonrpc; charset=utf-8\\r\\n\nHugAI-Version: 2.0.0\\r\\n\nGovernance-Level: supervised\\r\\n\n\\r\\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"agent/register\",\n  \"params\": {\n    \"agentId\": \"architecture-agent\",\n    \"capabilities\": {\n      \"tasks\": [\"design\", \"review\"],\n      \"governanceLevel\": \"supervised\"\n    }\n  }\n}\n</code></pre>"},{"location":"protocolo/especificacion/headers/#4-buenas-practicas-y-compatibilidad","title":"4. Buenas Pr\u00e1cticas y Compatibilidad","text":"<ul> <li>Todos los mensajes deben incluir <code>Content-Length</code> y <code>Content-Type</code>.</li> <li>Se recomienda incluir <code>HugAI-Version</code> y <code>Governance-Level</code> para trazabilidad y control de gobernanza.</li> <li>Los headers personalizados deben usar el prefijo <code>Custom-</code> para evitar colisiones.</li> <li>El cuerpo debe ser JSON v\u00e1lido, codificado en UTF-8.</li> <li>Los agentes y servidores deben ignorar headers desconocidos para mantener compatibilidad futura.</li> <li>La validaci\u00f3n de headers es cr\u00edtica para interoperabilidad y seguridad.</li> </ul> <p>Nota: La estructura de headers permite extender el protocolo sin romper compatibilidad, facilitando la evoluci\u00f3n y adopci\u00f3n en distintos entornos. </p>"},{"location":"protocolo/especificacion/mensajes/","title":"3. Mensajes del Protocolo - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n describe los mensajes principales del protocolo HugAI v2, sus campos, prop\u00f3sito y ejemplos de uso.</p>"},{"location":"protocolo/especificacion/mensajes/#31-mensaje-de-inicializacion-initialize","title":"3.1. Mensaje de Inicializaci\u00f3n (<code>initialize</code>)","text":"<p>Prop\u00f3sito: Establecer la conexi\u00f3n, negociar capacidades y compartir informaci\u00f3n de contexto entre agentes, clientes y el sistema.</p> Campo Tipo Requerido Descripci\u00f3n processId number S\u00ed Identificador del proceso cliente agentId string S\u00ed Identificador del agente/cliente capabilities object S\u00ed Capacidades soportadas governanceLevel string S\u00ed Nivel de gobernanza solicitado clientInfo object No Informaci\u00f3n del cliente (nombre, versi\u00f3n) workspaceFolders array No Carpetas de trabajo asociadas <p>Ejemplo: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"processId\": 12345,\n    \"agentId\": \"demo-agent-1\",\n    \"capabilities\": { \"code-generation\": true, \"testing\": true },\n    \"governanceLevel\": \"supervised\",\n    \"clientInfo\": { \"name\": \"HugAI Client\", \"version\": \"1.0.0\" },\n    \"workspaceFolders\": [\"/proyecto/demo\"]\n  },\n  \"id\": 1\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/mensajes/#32-registro-de-agente-agentregister","title":"3.2. Registro de Agente (<code>agent/register</code>)","text":"<p>Prop\u00f3sito: Registrar un agente en el sistema, anunciando sus capacidades y metadatos.</p> Campo Tipo Requerido Descripci\u00f3n agentId string S\u00ed Identificador \u00fanico del agente capabilities object S\u00ed Capacidades y tareas soportadas governanceLevel string S\u00ed Nivel de gobernanza soportado version string No Versi\u00f3n del agente author string No Autor o equipo responsable description string No Descripci\u00f3n breve dependencies string[] No Otros agentes requeridos <p>Ejemplo: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/register\",\n  \"params\": {\n    \"agentId\": \"advanced-agent-1\",\n    \"capabilities\": { \"code-generation\": true, \"testing\": true, \"refactoring\": true },\n    \"governanceLevel\": \"supervised\",\n    \"version\": \"1.2.0\",\n    \"author\": \"Equipo HugAI\",\n    \"description\": \"Agente avanzado para generaci\u00f3n y refactorizaci\u00f3n de c\u00f3digo\",\n    \"dependencies\": [\"test-agent\", \"review-agent\"]\n  },\n  \"id\": 2\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/mensajes/#33-solicitud-de-tarea-comunicacion-entre-agentes-agentrequest","title":"3.3. Solicitud de Tarea / Comunicaci\u00f3n entre Agentes (<code>agent/request</code>)","text":"<p>Prop\u00f3sito: Solicitar la ejecuci\u00f3n de una tarea o la colaboraci\u00f3n entre agentes.</p> Campo Tipo Requerido Descripci\u00f3n sourceAgent string S\u00ed Agente que origina la solicitud targetAgent string S\u00ed Agente destinatario task string S\u00ed Tarea a ejecutar context object No Contexto adicional (archivos, datos, etc.) priority string No Prioridad: low, medium, high, critical <p>Ejemplo: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"agent/request\",\n  \"params\": {\n    \"sourceAgent\": \"demo-agent-1\",\n    \"targetAgent\": \"test-agent-2\",\n    \"task\": \"generate-tests\",\n    \"context\": { \"file\": \"main.ts\" },\n    \"priority\": \"high\"\n  },\n  \"id\": 3\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/mensajes/#34-respuesta-response","title":"3.4. Respuesta (<code>response</code>)","text":"<p>Prop\u00f3sito: Devolver el resultado de una solicitud previa.</p> Campo Tipo Requerido Descripci\u00f3n id string/number S\u00ed Identificador de la solicitud original result object No Resultado de la operaci\u00f3n error object No Objeto de error si la operaci\u00f3n fall\u00f3 <p>Ejemplo (\u00e9xito): <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": { \"ack\": true, \"output\": \"Tests generados\" }\n}\n</code></pre> Ejemplo (error): <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": { \"code\": -32601, \"message\": \"M\u00e9todo no soportado\" }\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/mensajes/#35-evento-event","title":"3.5. Evento (<code>event</code>)","text":"<p>Prop\u00f3sito: Notificar cambios de estado, incidencias, progresos o sucesos relevantes.</p> Campo Tipo Requerido Descripci\u00f3n event string S\u00ed Nombre del evento data object No Datos asociados al evento <p>Ejemplo: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"event\",\n  \"params\": {\n    \"event\": \"task-progress\",\n    \"data\": { \"task\": \"generate-tests\", \"progress\": 50 }\n  }\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/mensajes/#36-aprobacion-de-gobernanza-governanceapproval","title":"3.6. Aprobaci\u00f3n de Gobernanza (<code>governance/approval</code>)","text":"<p>Prop\u00f3sito: Gestionar puntos de control humano, aprobaciones, revisiones y auditor\u00eda de decisiones cr\u00edticas.</p> Campo Tipo Requerido Descripci\u00f3n checkpoint string S\u00ed Nombre del punto de control artifact object S\u00ed Artefacto o evidencia a aprobar/revisar approver string S\u00ed Identificador del aprobador humano decision string S\u00ed approved, rejected, needs_revision feedback string No Comentarios o justificaci\u00f3n <p>Ejemplo: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"governance/approval\",\n  \"params\": {\n    \"checkpoint\": \"code-review\",\n    \"artifact\": { \"file\": \"main.ts\", \"diff\": \"...\" },\n    \"approver\": \"user-123\",\n    \"decision\": \"approved\",\n    \"feedback\": \"Cumple con los est\u00e1ndares.\"\n  },\n  \"id\": 4\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/mensajes/#37-integracion-de-herramientas-toolintegration","title":"3.7. Integraci\u00f3n de Herramientas (<code>tool/integration</code>)","text":"<p>Prop\u00f3sito: Interactuar con sistemas externos, ejecutar comandos, recibir resultados o integrar eventos de herramientas de terceros.</p> Campo Tipo Requerido Descripci\u00f3n tool string S\u00ed Nombre de la herramienta externa action string S\u00ed Acci\u00f3n a ejecutar data object No Datos o par\u00e1metros para la acci\u00f3n callback string No M\u00e9todo/callback para recibir la respuesta <p>Ejemplo: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"tool/integration\",\n  \"params\": {\n    \"tool\": \"ci-pipeline\",\n    \"action\": \"run-tests\",\n    \"data\": { \"branch\": \"feature-x\" },\n    \"callback\": \"event\"\n  },\n  \"id\": 5\n}\n</code></pre></p>"},{"location":"protocolo/especificacion/mensajes/#38-auditoria-y-trazabilidad-auditlog","title":"3.8. Auditor\u00eda y Trazabilidad (<code>audit/log</code>)","text":"<p>Prop\u00f3sito: Registrar acciones, decisiones y eventos relevantes para trazabilidad y cumplimiento.</p> Campo Tipo Requerido Descripci\u00f3n action string S\u00ed Acci\u00f3n registrada actor string S\u00ed Agente o humano responsable target string No Objeto o entidad afectada details object No Detalles adicionales timestamp string S\u00ed Fecha y hora (ISO 8601) <p>Ejemplo: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"audit/log\",\n  \"params\": {\n    \"action\": \"approval\",\n    \"actor\": \"user-123\",\n    \"target\": \"main.ts\",\n    \"details\": { \"decision\": \"approved\" },\n    \"timestamp\": \"2024-06-01T12:34:56Z\"\n  }\n}\n</code></pre></p> <p>Nota: Cada mensaje debe validarse contra su estructura y campos requeridos. Los ejemplos pueden extenderse seg\u00fan la evoluci\u00f3n del protocolo. </p>"},{"location":"protocolo/especificacion/roadmap/","title":"12. Roadmap y Evoluci\u00f3n - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n describe la hoja de ruta, fases de desarrollo y visi\u00f3n de futuro para el protocolo HugAI v2.</p>"},{"location":"protocolo/especificacion/roadmap/#121-fases-de-desarrollo","title":"12.1. Fases de Desarrollo","text":"<ul> <li>MVP (Producto M\u00ednimo Viable): \u2705 [COMPLETADO]</li> <li>Definici\u00f3n del protocolo base, mensajes principales y flujos esenciales. \u2705</li> <li>Implementaci\u00f3n de referencia (cliente, servidor, agentes b\u00e1sicos). \u23f3 [SIGUIENTE]</li> <li> <p>Documentaci\u00f3n inicial y ejemplos. \u2705</p> </li> <li> <p>Beta: \u23f3 [SIGUIENTE]</p> </li> <li>Pruebas de integraci\u00f3n y feedback de usuarios pioneros. \u23f3</li> <li>Mejora de seguridad, validaci\u00f3n y extensibilidad. \u23f3</li> <li> <p>Primeras integraciones con herramientas externas. \u23f3</p> </li> <li> <p>Est\u00e1ndar:</p> </li> <li>Publicaci\u00f3n de la especificaci\u00f3n estable. \u23f3</li> <li>Compatibilidad con versiones anteriores. \u23f3</li> <li> <p>Ampliaci\u00f3n de casos de uso y agentes avanzados. \u23f3</p> </li> <li> <p>Adopci\u00f3n y Comunidad:</p> </li> <li>Promoci\u00f3n, talleres y documentaci\u00f3n ampliada. \u23f3</li> <li>Soporte para contribuciones externas y gobernanza abierta. \u23f3</li> </ul>"},{"location":"protocolo/especificacion/roadmap/#122-hitos-clave-y-entregables","title":"12.2. Hitos Clave y Entregables","text":"<ul> <li>Especificaci\u00f3n v2 completa y validada. \u2705 [COMPLETADO]</li> <li>Implementaciones de referencia (TypeScript/Node.js, otros lenguajes). \u23f3 [SIGUIENTE]</li> <li>Suite de ejemplos y casos pr\u00e1cticos. \u2705</li> <li>Herramientas de validaci\u00f3n y testing. \u23f3</li> <li>Portal de documentaci\u00f3n y comunidad. \u23f3</li> </ul>"},{"location":"protocolo/especificacion/roadmap/#123-plan-de-versiones-y-compatibilidad","title":"12.3. Plan de Versiones y Compatibilidad","text":"<ul> <li>Versionado sem\u00e1ntico (semver): MAJOR.MINOR.PATCH \u2705</li> <li>Compatibilidad hacia atr\u00e1s garantizada en versiones MINOR y PATCH. \u2705</li> <li>Cambios incompatibles solo en versiones MAJOR, con migraci\u00f3n documentada. \u2705</li> <li>Registro de cambios (changelog) y notas de migraci\u00f3n. \u23f3</li> </ul>"},{"location":"protocolo/especificacion/roadmap/#124-estrategia-de-comunidad-y-contribucion","title":"12.4. Estrategia de Comunidad y Contribuci\u00f3n","text":"<ul> <li>Repositorio abierto y gobernanza transparente. \u2705</li> <li>Gu\u00edas para contribuir, reportar issues y proponer extensiones. \u23f3</li> <li>Comit\u00e9 de revisi\u00f3n para cambios mayores. \u23f3</li> <li>Fomento de la interoperabilidad y adopci\u00f3n en proyectos reales. \u23f3</li> </ul>"},{"location":"protocolo/especificacion/roadmap/#125-lineas-futuras-y-vision","title":"12.5. L\u00edneas Futuras y Visi\u00f3n","text":"<ul> <li>Nuevas capacidades para agentes (IA generativa, an\u00e1lisis avanzado, integraci\u00f3n con LLMs). \u23f3</li> <li>Integraci\u00f3n con otros est\u00e1ndares (LSP, OpenAPI, MLOps, etc.). \u23f3</li> <li>Automatizaci\u00f3n avanzada de flujos y gobernanza din\u00e1mica. \u23f3</li> <li>Soporte para despliegue en entornos cloud, edge y on-premise. \u23f3</li> <li>Expansi\u00f3n a dominios fuera de desarrollo software (gobierno, salud, educaci\u00f3n, etc.). \u23f3</li> </ul> <p>Nota: El roadmap es din\u00e1mico y se ajustar\u00e1 seg\u00fan feedback, avances tecnol\u00f3gicos y necesidades de la comunidad. </p>"},{"location":"protocolo/especificacion/seguridad/","title":"9. Seguridad y Validaci\u00f3n - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n describe los principios y mecanismos de seguridad y validaci\u00f3n en el protocolo HugAI v2.</p>"},{"location":"protocolo/especificacion/seguridad/#91-principios-de-seguridad","title":"9.1. Principios de Seguridad","text":"<ul> <li>Seguridad por dise\u00f1o: todos los mensajes y flujos consideran amenazas y protecci\u00f3n de datos.</li> <li>M\u00ednimos privilegios: los agentes y humanos solo acceden a lo necesario.</li> <li>Trazabilidad y auditor\u00eda de todas las acciones relevantes.</li> </ul>"},{"location":"protocolo/especificacion/seguridad/#92-autenticacion-y-autorizacion","title":"9.2. Autenticaci\u00f3n y Autorizaci\u00f3n","text":"<ul> <li>Agentes:</li> <li>Cada agente debe tener un <code>agentId</code> \u00fanico y, opcionalmente, un <code>agentSecret</code> o token para autenticaci\u00f3n.</li> <li>El sistema valida la identidad antes de aceptar registros o solicitudes sensibles.</li> <li>Humanos:</li> <li>Los aprobadores y usuarios deben autenticarse (por ejemplo, SSO, OAuth, etc.).</li> <li>Los roles y permisos determinan qu\u00e9 acciones pueden aprobar o ejecutar.</li> </ul>"},{"location":"protocolo/especificacion/seguridad/#93-validacion-de-mensajes-y-datos","title":"9.3. Validaci\u00f3n de Mensajes y Datos","text":"<ul> <li>Todos los mensajes deben validarse contra su esquema antes de ser procesados.</li> <li>Los campos requeridos y tipos deben comprobarse rigurosamente.</li> <li>Los agentes deben rechazar mensajes malformados o inesperados.</li> </ul>"},{"location":"protocolo/especificacion/seguridad/#94-auditoria-y-trazabilidad","title":"9.4. Auditor\u00eda y Trazabilidad","text":"<ul> <li>Todas las acciones cr\u00edticas (aprobaciones, cambios, ejecuciones) deben registrarse mediante <code>audit/log</code>.</li> <li>Los registros deben incluir: actor, acci\u00f3n, timestamp, detalles y resultado.</li> <li>Se recomienda almacenar logs de auditor\u00eda en sistemas inmutables o protegidos.</li> </ul>"},{"location":"protocolo/especificacion/seguridad/#95-buenas-practicas-de-proteccion-y-prevencion","title":"9.5. Buenas Pr\u00e1cticas de Protecci\u00f3n y Prevenci\u00f3n","text":"<ul> <li>Nunca exponer secretos (agentSecret, tokens) en logs o mensajes.</li> <li>Usar canales cifrados (TLS/SSL) para todas las comunicaciones.</li> <li>Rotar credenciales y tokens peri\u00f3dicamente.</li> <li>Limitar el alcance de los tokens y permisos.</li> <li>Implementar mecanismos de rate limiting y detecci\u00f3n de anomal\u00edas.</li> <li>Validar entradas para prevenir inyecci\u00f3n, XSS, y otros ataques comunes.</li> </ul>"},{"location":"protocolo/especificacion/seguridad/#96-ejemplo-de-flujo-seguro","title":"9.6. Ejemplo de Flujo Seguro","text":"<pre><code>sequenceDiagram\n    participant Agente\n    participant Protocolo\n    participant Humano\n    Agente-&gt;&gt;Protocolo: agent/register (con agentSecret)\n    Protocolo--&gt;&gt;Agente: response (registro validado)\n    Agente-&gt;&gt;Protocolo: agent/request (tarea sensible)\n    Protocolo-&gt;&gt;Humano: governance/approval (requiere autenticaci\u00f3n)\n    Humano--&gt;&gt;Protocolo: governance/approval (decisi\u00f3n, autenticado)\n    Protocolo-&gt;&gt;Agente: response (resultado)\n    Protocolo-&gt;&gt;Auditor\u00eda: audit/log (todas las acciones)</code></pre> <p>Nota: La seguridad es responsabilidad compartida entre agentes, humanos y el sistema. Se recomienda revisar y actualizar las pol\u00edticas de seguridad peri\u00f3dicamente. </p>"},{"location":"protocolo/especificacion/tipos/","title":"2. Tipos y Estructuras Base - Especificaci\u00f3n HugAI v2","text":"<p>Esta secci\u00f3n define los tipos y estructuras fundamentales del protocolo HugAI v2. Todos los mensajes y flujos del protocolo se basan en estos tipos.</p>"},{"location":"protocolo/especificacion/tipos/#21-mensaje-json-rpc-base","title":"2.1. Mensaje JSON-RPC Base","text":"Campo Tipo Requerido Descripci\u00f3n jsonrpc string (\"2.0\") S\u00ed Versi\u00f3n del protocolo JSON-RPC method string S\u00ed Nombre del m\u00e9todo/procedimiento params object (opcional) No Par\u00e1metros espec\u00edficos del m\u00e9todo id string / number Opcional Identificador \u00fanico de la solicitud/respuesta"},{"location":"protocolo/especificacion/tipos/#22-agente","title":"2.2. Agente","text":"Campo Tipo Requerido Descripci\u00f3n agentId string S\u00ed Identificador \u00fanico del agente type string (enum) S\u00ed Tipo de agente (an\u00e1lisis, implementaci\u00f3n, etc.) capabilities string[] S\u00ed Lista de capacidades/tareas soportadas governanceLevel string (enum) S\u00ed Nivel de gobernanza: autonomous, supervised, manual version string No Versi\u00f3n del agente author string No Autor o equipo responsable description string No Descripci\u00f3n breve del agente dependencies string[] No Otros agentes requeridos"},{"location":"protocolo/especificacion/tipos/#23-capacidad-de-agente","title":"2.3. Capacidad de Agente","text":"Campo Tipo Requerido Descripci\u00f3n name string S\u00ed Nombre de la capacidad/tarea inputs string[] No Tipos de entrada requeridos outputs string[] No Tipos de salida generados params object No Par\u00e1metros de configuraci\u00f3n espec\u00edficos"},{"location":"protocolo/especificacion/tipos/#24-objeto-de-workflow","title":"2.4. Objeto de Workflow","text":"Campo Tipo Requerido Descripci\u00f3n id string S\u00ed Identificador \u00fanico del workflow projectId string S\u00ed Proyecto asociado currentPhase string (enum) S\u00ed Fase actual (planning, design, etc.) status string (enum) S\u00ed Estado general (in_progress, completed, etc.) phases object[] S\u00ed Lista de fases y su informaci\u00f3n governanceRules object[] S\u00ed Reglas de gobernanza aplicadas requirements object S\u00ed Requerimientos del workflow createdAt string (ISO date) S\u00ed Fecha de creaci\u00f3n updatedAt string (ISO date) S\u00ed Fecha de \u00faltima actualizaci\u00f3n"},{"location":"protocolo/especificacion/tipos/#25-objeto-de-aprobaciongobernanza","title":"2.5. Objeto de Aprobaci\u00f3n/Gobernanza","text":"Campo Tipo Requerido Descripci\u00f3n checkpoint string S\u00ed Nombre del punto de control artifact object S\u00ed Artefacto o evidencia a aprobar/revisar approver string S\u00ed Identificador del aprobador humano decision string S\u00ed approved, rejected, needs_revision feedback string No Comentarios o justificaci\u00f3n"},{"location":"protocolo/especificacion/tipos/#tipos-y-enums-adicionales","title":"Tipos y Enums Adicionales","text":""},{"location":"protocolo/especificacion/tipos/#estado-de-agente-agentstatus","title":"Estado de Agente (<code>AgentStatus</code>)","text":"Valor Descripci\u00f3n idle El agente est\u00e1 disponible y en espera busy El agente est\u00e1 procesando una tarea error El agente ha encontrado un error offline El agente no est\u00e1 disponible"},{"location":"protocolo/especificacion/tipos/#estado-de-checkpoint-de-gobernanza-checkpointstatus","title":"Estado de Checkpoint de Gobernanza (<code>CheckpointStatus</code>)","text":"Valor Descripci\u00f3n pending Pendiente de revisi\u00f3n/aprobaci\u00f3n approved Aprobado rejected Rechazado escalated Escalado a un nivel superior"},{"location":"protocolo/especificacion/tipos/#estado-de-fase-de-workflow-workflowphasestatus","title":"Estado de Fase de Workflow (<code>WorkflowPhaseStatus</code>)","text":"Valor Descripci\u00f3n not_started La fase a\u00fan no ha comenzado in_progress La fase est\u00e1 en curso completed La fase ha finalizado con \u00e9xito failed La fase ha fallado o no se complet\u00f3 <p>Nota: Estos enums permiten modelar el estado y la transici\u00f3n de agentes, checkpoints y fases en los flujos de trabajo HugAI, facilitando la trazabilidad y la gesti\u00f3n din\u00e1mica del proceso.</p> <p>Nota: Los tipos y estructuras pueden extenderse seg\u00fan la evoluci\u00f3n del protocolo. Cada campo debe documentarse y validarse en las implementaciones. </p>"}]}